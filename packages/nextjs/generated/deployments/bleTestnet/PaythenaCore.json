{
  "address": "0xcC16052C70f7188DC724D420Fc6fb284026877f7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CompanyAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CompanyNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContributorNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidContributor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFrequency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentAlreadyProcessed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedAccess",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newContract",
          "type": "address"
        }
      ],
      "name": "AutomationContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CompanyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salary",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ContributorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ContributorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FundsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "IntegrationError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PaymentProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SalaryProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUTOMATION_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMPANY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONTRIBUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEGRATION_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PAYMENT_FREQUENCY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PAYMENT_HISTORY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_PAYMENT_FREQUENCY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDE",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "salary",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentFrequency",
          "type": "uint256"
        }
      ],
      "name": "addContributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "automationContract",
      "outputs": [
        {
          "internalType": "contract IPaythenaAutomation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "company",
          "type": "address"
        }
      ],
      "name": "canProcessPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkIntegrationStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "stakingActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "loanActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "automationActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "companies",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributorCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contributorToCompany",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveCompanies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "company",
          "type": "address"
        }
      ],
      "name": "getActiveContributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAutomationInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "batchSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastProcessed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "company",
          "type": "address"
        }
      ],
      "name": "getCompanyDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributorCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "getContributorDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "salary",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextPayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentFrequency",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastProcessedTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLoanBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "getLoanInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creditScore",
          "type": "uint256"
        },
        {
          "internalType": "enum LoanStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getStakingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "company",
          "type": "address"
        }
      ],
      "name": "getTotalPayroll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "isPaymentDue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanContract",
      "outputs": [
        {
          "internalType": "contract IPaythenaLoan",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "contributors",
          "type": "address[]"
        }
      ],
      "name": "processPaymentBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "processSalary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "registerCompany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "removeContributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_automationContract",
          "type": "address"
        }
      ],
      "name": "setAutomationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "setLoanContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract IPaythenaStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34879136e22e9080a2ed5d34cffa3461c899e7f9efe0bba1a8926c8508f54144",
  "receipt": {
    "to": null,
    "from": "0x7012FB31F1223A70D5dd78A58Fe7DdD2f28F7E85",
    "contractAddress": "0xcC16052C70f7188DC724D420Fc6fb284026877f7",
    "transactionIndex": 1,
    "gasUsed": "2911005",
    "logsBloom": "0x
    "blockHash": "0x75032a08e560167605a495ac4c6283697d70c13696837ecab83a9b7799c95974",
    "transactionHash": "0x34879136e22e9080a2ed5d34cffa3461c899e7f9efe0bba1a8926c8508f54144",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 2796391,
        "transactionHash": "0x34879136e22e9080a2ed5d34cffa3461c899e7f9efe0bba1a8926c8508f54144",
        "address": "0xcC16052C70f7188DC724D420Fc6fb284026877f7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007012fb31f1223a70d5dd78a58fe7ddd2f28f7e85",
          "0x0000000000000000000000007012fb31f1223a70d5dd78a58fe7ddd2f28f7e85"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x75032a08e560167605a495ac4c6283697d70c13696837ecab83a9b7799c95974"
      }
    ],
    "blockNumber": 2796391,
    "cumulativeGasUsed": "2954823",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x391FfEB2B58d4c08a484ad21C639D2c7fd793f76",
    "0x165eD3639C955CC79485ee580659860CdEAC9155"
  ],
  "numDeployments": 1,
  "solcInputHash": "dd7f43f006d7b5e17cd30b2a51833282",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CompanyAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CompanyNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContributorNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContributor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFrequency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"AutomationContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CompanyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salary\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ContributorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ContributorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"IntegrationError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PaymentProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SalaryProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTOMATION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPANY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRIBUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEGRATION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PAYMENT_FREQUENCY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PAYMENT_HISTORY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PAYMENT_FREQUENCY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"salary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentFrequency\",\"type\":\"uint256\"}],\"name\":\"addContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automationContract\",\"outputs\":[{\"internalType\":\"contract IPaythenaAutomation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"}],\"name\":\"canProcessPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIntegrationStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"stakingActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"loanActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"automationActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"companies\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributorCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributorToCompany\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveCompanies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"}],\"name\":\"getActiveContributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutomationInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastProcessed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"}],\"name\":\"getCompanyDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributorCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"getContributorDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"salary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentFrequency\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastProcessedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLoanBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getLoanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creditScore\",\"type\":\"uint256\"},{\"internalType\":\"enum LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"}],\"name\":\"getTotalPayroll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"isPaymentDue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanContract\",\"outputs\":[{\"internalType\":\"contract IPaythenaLoan\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contributors\",\"type\":\"address[]\"}],\"name\":\"processPaymentBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"processSalary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerCompany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"removeContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_automationContract\",\"type\":\"address\"}],\"name\":\"setAutomationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"setLoanContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IPaythenaStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Handles company registration, contributor management, and payroll processing\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_loanContract\":\"Address of loan contract\",\"_stakingContract\":\"Address of staking contract\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"PaythenaCore\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Contract constructor\"}},\"notice\":\"Main contract for Paythena payroll system\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaythenaCore.sol\":\"PaythenaCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/PaythenaCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IPaythenaCore.sol\\\";\\nimport \\\"./interfaces/IPaythenaStaking.sol\\\";\\nimport \\\"./interfaces/IPaythenaLoan.sol\\\";\\nimport \\\"./interfaces/IPaythenaAutomation.sol\\\";\\nimport {LoanStatus} from \\\"./interfaces/IPaythenaLoan.sol\\\";\\n\\n/**\\n * @title PaythenaCore\\n * @notice Main contract for Paythena payroll system\\n * @dev Handles company registration, contributor management, and payroll processing\\n */\\ncontract PaythenaCore is IPaythenaCore, ReentrancyGuard, AccessControl, Pausable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // Additional structs for internal use\\n    struct PaymentHistory {\\n        uint256 amount;\\n        uint256 timestamp;\\n        string description;\\n    }\\n\\n    struct PaymentRecord {\\n        uint256 paymentId;\\n        bytes32 txHash;\\n        uint256 timestamp;\\n        uint256 amount;\\n        bool processed;\\n    }\\n\\n    // State variables\\n    IERC20 public constant USDE = IERC20(0x426E7d03f9803Dd11cb8616C65b99a3c0AfeA6dE);\\n    IPaythenaStaking public stakingContract;\\n    IPaythenaLoan public loanContract;\\n    IPaythenaAutomation public automationContract;\\n\\n    // Role constants as immutable bytes32\\n    bytes32 private immutable _COMPANY_ROLE = keccak256(\\\"COMPANY_ROLE\\\");\\n    bytes32 private immutable _CONTRIBUTOR_ROLE = keccak256(\\\"CONTRIBUTOR_ROLE\\\");\\n    bytes32 private immutable _AUTOMATION_ROLE = keccak256(\\\"AUTOMATION_ROLE\\\");\\n    bytes32 private immutable _INTEGRATION_ROLE = keccak256(\\\"INTEGRATION_ROLE\\\");\\n\\n    // Storage\\n    mapping(address => Company) public companies;\\n    mapping(address => address) public contributorToCompany;\\n    mapping(address => PaymentHistory[]) private paymentHistories;\\n    mapping(address => mapping(address => PaymentRecord[])) private paymentRecords;\\n    mapping(bytes32 => bool) private processedTxs;\\n    address[] private companyAddresses;\\n    uint256 private nextPaymentId = 1;\\n\\n    // Constants\\n    uint256 public constant MIN_PAYMENT_FREQUENCY = 1 days;    // 86400 seconds\\n    uint256 public constant MAX_PAYMENT_FREQUENCY = 30 days;   // 2592000 seconds\\n    uint256 public constant MAX_PAYMENT_HISTORY = 10;\\n\\n    // Custom errors\\n    error InvalidAmount();\\n    error CompanyNotActive();\\n    error CompanyAlreadyRegistered();\\n    error InvalidContributor();\\n    error InsufficientBalance();\\n    error UnauthorizedAccess();\\n    error InvalidAddress();\\n    error InvalidFrequency();\\n    error ContributorNotActive();\\n    error PaymentAlreadyProcessed();\\n\\n    /**\\n     * @notice Contract constructor\\n     * @param _stakingContract Address of staking contract\\n     * @param _loanContract Address of loan contract\\n     */\\n    constructor(\\n        address _stakingContract,\\n        address _loanContract\\n    ) {\\n        if (_stakingContract == address(0)) revert InvalidAddress();\\n        if (_loanContract == address(0)) revert InvalidAddress();\\n\\n        stakingContract = IPaythenaStaking(_stakingContract);\\n        loanContract = IPaythenaLoan(_loanContract);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // Integration functions\\n    function setAutomationContract(address _automationContract) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_automationContract == address(0)) revert InvalidAddress();\\n        if (_automationContract.code.length == 0) revert InvalidAddress();\\n        \\n        address oldContract = address(automationContract);\\n        automationContract = IPaythenaAutomation(_automationContract);\\n        \\n        if (oldContract != address(0)) {\\n            _revokeRole(_AUTOMATION_ROLE, oldContract);\\n        }\\n        _grantRole(_AUTOMATION_ROLE, _automationContract);\\n        \\n        emit AutomationContractUpdated(oldContract, _automationContract);\\n    }\\n\\n    function getStakedAmount(address account) external view override returns (uint256) {\\n        return stakingContract.getStakedAmount(account);\\n    }\\n\\n    function getLoanBalance(address account) external view override returns (uint256) {\\n        return loanContract.getLoanBalance(account);\\n    }\\n\\n    // Override AccessControl functions\\n    function hasRole(bytes32 role, address account) \\n        public \\n        view \\n        virtual \\n        override(IPaythenaCore, AccessControl) \\n        returns (bool) \\n    {\\n        return super.hasRole(role, account);\\n    }\\n\\n    function getRoleAdmin(bytes32 role)\\n        public\\n        view\\n        virtual\\n        override(IPaythenaCore, AccessControl)\\n        returns (bytes32)\\n    {\\n        return super.getRoleAdmin(role);\\n    }\\n\\n    function grantRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override(IPaythenaCore, AccessControl)\\n    {\\n        super.grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override(IPaythenaCore, AccessControl)\\n    {\\n        super.revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override(IPaythenaCore, AccessControl)\\n    {\\n        super.renounceRole(role, account);\\n    }\\n\\n    // Role getters\\n    function COMPANY_ROLE() external view override returns (bytes32) {\\n        return _COMPANY_ROLE;\\n    }\\n\\n    function CONTRIBUTOR_ROLE() external view override returns (bytes32) {\\n        return _CONTRIBUTOR_ROLE;\\n    }\\n\\n    function AUTOMATION_ROLE() external view override returns (bytes32) {\\n        return _AUTOMATION_ROLE;\\n    }\\n\\n    function INTEGRATION_ROLE() external view override returns (bytes32) {\\n        return _INTEGRATION_ROLE;\\n    }\\n\\n    // Core functions\\n    function registerCompany(string calldata name) external override nonReentrant whenNotPaused {\\n        if (bytes(name).length == 0) revert InvalidAmount();\\n        if (companies[msg.sender].isActive) revert CompanyAlreadyRegistered();\\n        \\n        Company storage newCompany = companies[msg.sender];\\n        newCompany.name = name;\\n        newCompany.balance = 0;\\n        newCompany.contributorCount = 0;\\n        newCompany.isActive = true;\\n        newCompany.admin = msg.sender;\\n        \\n        companyAddresses.push(msg.sender);\\n        _grantRole(_COMPANY_ROLE, msg.sender);\\n        \\n        emit CompanyRegistered(msg.sender, name, block.timestamp);\\n    }\\n\\n    function addContributor(\\n        address contributor,\\n        string calldata name,\\n        uint256 salary,\\n        uint256 paymentFrequency\\n    ) external override nonReentrant whenNotPaused {\\n        if (!hasRole(_COMPANY_ROLE, msg.sender)) revert UnauthorizedAccess();\\n        if (contributor == address(0)) revert InvalidAddress();\\n        if (bytes(name).length == 0) revert InvalidAmount();\\n        if (salary == 0) revert InvalidAmount();\\n        if (paymentFrequency < MIN_PAYMENT_FREQUENCY || \\n            paymentFrequency > MAX_PAYMENT_FREQUENCY) revert InvalidFrequency();\\n\\n        Company storage company = companies[msg.sender];\\n        if (!company.isActive) revert CompanyNotActive();\\n\\n        Contributor storage cont = company.contributors[contributor];\\n        if (cont.isActive) revert ContributorNotActive();\\n\\n        cont.name = name;\\n        cont.salary = salary;\\n        cont.paymentFrequency = paymentFrequency;\\n        cont.nextPayment = block.timestamp + paymentFrequency;\\n        cont.isActive = true;\\n        cont.lastProcessedTime = block.timestamp;\\n\\n        company.contributorCount++;\\n        company.contributorAddresses.push(contributor);\\n        contributorToCompany[contributor] = msg.sender;\\n        _grantRole(_CONTRIBUTOR_ROLE, contributor);\\n\\n        emit ContributorAdded(msg.sender, contributor, name, salary, block.timestamp);\\n    }\\n\\n    function removeContributor(address contributor) external override nonReentrant whenNotPaused {\\n        if (!hasRole(_COMPANY_ROLE, msg.sender)) revert UnauthorizedAccess();\\n        \\n        Company storage company = companies[msg.sender];\\n        if (!company.isActive) revert CompanyNotActive();\\n        \\n        Contributor storage cont = company.contributors[contributor];\\n        if (!cont.isActive) revert ContributorNotActive();\\n        \\n        cont.isActive = false;\\n        company.contributorCount--;\\n        contributorToCompany[contributor] = address(0);\\n        _revokeRole(_CONTRIBUTOR_ROLE, contributor);\\n        \\n        emit ContributorRemoved(msg.sender, contributor, block.timestamp);\\n    }\\n\\n    function processSalary(address contributor) external override nonReentrant whenNotPaused {\\n        if (!hasRole(_COMPANY_ROLE, msg.sender)) revert UnauthorizedAccess();\\n        \\n        Company storage company = companies[msg.sender];\\n        if (!company.isActive) revert CompanyNotActive();\\n\\n        Contributor storage cont = company.contributors[contributor];\\n        if (!cont.isActive) revert ContributorNotActive();\\n        if (block.timestamp < cont.nextPayment) revert PaymentAlreadyProcessed();\\n        if (company.balance < cont.salary) revert InsufficientBalance();\\n\\n        uint256 paymentId = nextPaymentId++;\\n        bytes32 txHash = keccak256(abi.encodePacked(\\n            msg.sender,\\n            contributor,\\n            paymentId,\\n            block.timestamp\\n        ));\\n\\n        if (processedTxs[txHash]) revert PaymentAlreadyProcessed();\\n        processedTxs[txHash] = true;\\n\\n        company.balance -= cont.salary;\\n        cont.lastPayment = block.timestamp;\\n        cont.nextPayment = block.timestamp + cont.paymentFrequency;\\n        cont.lastProcessedTime = block.timestamp;\\n\\n        PaymentRecord memory record = PaymentRecord({\\n            paymentId: paymentId,\\n            txHash: txHash,\\n            timestamp: block.timestamp,\\n            amount: cont.salary,\\n            processed: true\\n        });\\n\\n        paymentRecords[msg.sender][contributor].push(record);\\n        USDE.safeTransfer(contributor, cont.salary);\\n\\n        emit PaymentProcessed(\\n            paymentId,\\n            msg.sender,\\n            contributor,\\n            cont.salary,\\n            txHash,\\n            block.timestamp\\n        );\\n    }\\n\\n    // Fund management functions\\n    function deposit(uint256 amount) external override nonReentrant whenNotPaused {\\n        if (!hasRole(_COMPANY_ROLE, msg.sender)) revert UnauthorizedAccess();\\n        if (amount == 0) revert InvalidAmount();\\n        \\n        Company storage company = companies[msg.sender];\\n        if (!company.isActive) revert CompanyNotActive();\\n\\n        company.balance += amount;\\n        USDE.safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        emit FundsDeposited(msg.sender, amount, block.timestamp);\\n    }\\n\\n    function withdraw(uint256 amount) external override nonReentrant whenNotPaused {\\n        if (!hasRole(_COMPANY_ROLE, msg.sender)) revert UnauthorizedAccess();\\n        if (amount == 0) revert InvalidAmount();\\n        \\n        Company storage company = companies[msg.sender];\\n        if (!company.isActive) revert CompanyNotActive();\\n        if (company.balance < amount) revert InsufficientBalance();\\n\\n        company.balance -= amount;\\n        USDE.safeTransfer(msg.sender, amount);\\n        \\n        emit FundsWithdrawn(msg.sender, amount, block.timestamp);\\n    }\\n\\n    // Automation functions\\n    function processPaymentBatch(address[] calldata contributors) \\n        external \\n        override \\n        onlyRole(_AUTOMATION_ROLE) \\n        nonReentrant \\n        whenNotPaused \\n        returns (uint256)\\n    {\\n        if (msg.sender != address(automationContract)) revert UnauthorizedAccess();\\n        \\n        uint256 processedCount = 0;\\n\\n        for (uint256 i = 0; i < contributors.length; i++) {\\n            address contributor = contributors[i];\\n            address companyAddr = contributorToCompany[contributor];\\n            \\n            if (!isPaymentDue(companyAddr, contributor)) continue;\\n            if (!canProcessPayment(companyAddr)) continue;\\n\\n            try this.processSalary(contributor) {\\n                processedCount++;\\n            } catch {\\n                emit IntegrationError(\\\"Payment failed\\\", \\\"\\\");\\n                continue;\\n            }\\n        }\\n\\n        return processedCount;\\n    }\\n\\n    // View functions\\n    function getCompanyDetails(address company) external view override returns (\\n        string memory name,\\n        uint256 balance,\\n        uint256 contributorCount,\\n        bool isActive,\\n        address admin\\n    ) {\\n        Company storage comp = companies[company];\\n        return (\\n            comp.name,\\n            comp.balance,\\n            comp.contributorCount,\\n            comp.isActive,\\n            comp.admin\\n        );\\n    }\\n\\n    function getContributorDetails(\\n        address company,\\n        address contributor\\n    ) external view override returns (\\n        string memory name,\\n        uint256 salary,\\n        uint256 nextPayment,\\n        uint256 paymentFrequency,\\n        bool isActive,\\n        uint256 lastProcessedTime\\n    ) {\\n        Contributor storage cont = companies[company].contributors[contributor];\\n        return (\\n            cont.name,\\n            cont.salary,\\n            cont.nextPayment,\\n            cont.paymentFrequency,\\n            cont.isActive,\\n            cont.lastProcessedTime\\n        );\\n    }\\n\\n    // Helper functions\\n    function isPaymentDue(address company, address contributor) \\n        public \\n        view \\n        override \\n        returns (bool) \\n    {\\n        Company storage comp = companies[company];\\n        if (!comp.isActive) return false;\\n\\n        Contributor storage cont = comp.contributors[contributor];\\n        return cont.isActive && block.timestamp >= cont.nextPayment;\\n    }\\n\\n    function canProcessPayment(address company) \\n        public \\n        view \\n        override \\n        returns (bool) \\n    {\\n        Company storage comp = companies[company];\\n        if (!comp.isActive || paused()) return false;\\n\\n        uint256 totalPayroll = getTotalPayroll(company);\\n        return comp.balance >= totalPayroll;\\n    }\\n\\n    function getActiveCompanies() \\n        external \\n        view \\n        override \\n        returns (address[] memory) \\n    {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < companyAddresses.length; i++) {\\n            if (companies[companyAddresses[i]].isActive) {\\n                count++;\\n            }\\n        }\\n\\n        address[] memory activeCompanies = new address[](count);\\n        uint256 index = 0;\\n        \\n        for (uint256 i = 0; i < companyAddresses.length; i++) {\\n            if (companies[companyAddresses[i]].isActive) {\\n                activeCompanies[index] = companyAddresses[i];\\n                index++;\\n            }\\n        }\\n\\n        return activeCompanies;\\n    }\\n\\n    function getActiveContributors(address company) \\n        external \\n        view \\n        override \\n        returns (address[] memory) \\n    {\\n        Company storage comp = companies[company];\\n        if (!comp.isActive) revert CompanyNotActive();\\n\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < comp.contributorAddresses.length; i++) {\\n            if (comp.contributors[comp.contributorAddresses[i]].isActive) {\\n                count++;\\n            }\\n        }\\n\\n        address[] memory activeContributors = new address[](count);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < comp.contributorAddresses.length; i++) {\\n            address contributor = comp.contributorAddresses[i];\\n            if (comp.contributors[contributor].isActive) {\\n                activeContributors[index] = contributor;\\n                index++;\\n            }\\n        }\\n\\n        return activeContributors;\\n    }\\n\\n    function getTotalPayroll(address company) \\n        public \\n        view \\n        override \\n        returns (uint256) \\n    {\\n        Company storage comp = companies[company];\\n        if (!comp.isActive) return 0;\\n\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < comp.contributorAddresses.length; i++) {\\n            address contributor = comp.contributorAddresses[i];\\n            if (comp.contributors[contributor].isActive) {\\n                total += comp.contributors[contributor].salary;\\n            }\\n        }\\n\\n        return total;\\n    }\\n\\n    // Emergency functions\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    function setStakingContract(address _stakingContract) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_stakingContract == address(0)) revert InvalidAddress();\\n        if (_stakingContract.code.length == 0) revert InvalidAddress();\\n        stakingContract = IPaythenaStaking(_stakingContract);\\n    }\\n\\n    function setLoanContract(address _loanContract) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_loanContract == address(0)) revert InvalidAddress();\\n        if (_loanContract.code.length == 0) revert InvalidAddress();\\n        loanContract = IPaythenaLoan(_loanContract);\\n    }\\n\\n    // Integration view functions\\n    function getStakingInfo(address account) \\n        external \\n        view \\n        returns (\\n            uint256 stakedAmount,\\n            uint256 pendingRewards,\\n            uint256 currentRate\\n        ) \\n    {\\n        try stakingContract.getStakedAmount(account) returns (uint256 staked) {\\n            try stakingContract.getPendingRewards(account) returns (uint256 pending) {\\n                try stakingContract.rewardRate() returns (uint256 rate) {\\n                    return (staked, pending, rate);\\n                } catch {\\n                    return (staked, pending, 0);\\n                }\\n            } catch {\\n                return (staked, 0, 0);\\n            }\\n        } catch {\\n            return (0, 0, 0);\\n        }\\n    }\\n\\n    function getLoanInfo(address borrower) \\n        external \\n        view \\n        returns (\\n            uint256 loanBalance,\\n            uint256 creditScore,\\n            LoanStatus status\\n        ) \\n    {\\n        try loanContract.getLoanDetails(borrower) returns (\\n            uint256,  // amount\\n            uint256,  // totalDue\\n            uint256,  // monthlyPayment\\n            uint256,  // remainingAmount\\n            uint256,  // nextPaymentDue\\n            LoanStatus loanStatus\\n        ) {\\n            try loanContract.getLoanBalance(borrower) returns (uint256 balance) {\\n                try loanContract.getCreditScore(borrower) returns (uint256 score) {\\n                    return (balance, score, loanStatus);\\n                } catch {\\n                    return (balance, 0, loanStatus);\\n                }\\n            } catch {\\n                return (0, 0, loanStatus);\\n            }\\n        } catch {\\n            return (0, 0, LoanStatus.None);\\n        }\\n    }\\n\\n    function getAutomationInfo() \\n        external \\n        view \\n        returns (\\n            uint256 interval,\\n            uint256 batchSize,\\n            uint256 lastProcessed,\\n            bool isActive\\n        ) \\n    {\\n        if (address(automationContract) == address(0)) {\\n            return (0, 0, 0, false);\\n        }\\n\\n        try automationContract.PROCESSING_INTERVAL() returns (uint256 _interval) {\\n            try automationContract.MAX_BATCH_SIZE() returns (uint256 _batchSize) {\\n                try automationContract.lastProcessedTime() returns (uint256 _lastProcessed) {\\n                    return (_interval, _batchSize, _lastProcessed, !paused());\\n                } catch {\\n                    return (_interval, _batchSize, 0, !paused());\\n                }\\n            } catch {\\n                return (_interval, 0, 0, !paused());\\n            }\\n        } catch {\\n            return (0, 0, 0, !paused());\\n        }\\n    }\\n\\n    // Add helper function to check integration status\\n    function checkIntegrationStatus() \\n        external \\n        view \\n        returns (\\n            bool stakingActive,\\n            bool loanActive,\\n            bool automationActive\\n        ) \\n    {\\n        stakingActive = address(stakingContract) != address(0) && \\n                       !stakingContract.paused();\\n        \\n        loanActive = address(loanContract) != address(0) && \\n                    !loanContract.paused();\\n        \\n        automationActive = address(automationContract) != address(0) && \\n                          !automationContract.paused();\\n    }\\n}\",\"keccak256\":\"0xc0945a99c04c6e6b1bd2921b1a1f1580ecfcf9002f0463c3f5adb4119d6302b8\",\"license\":\"MIT\"},\"contracts/interfaces/IPaythenaAutomation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IPaythenaAutomation {\\n    // Events\\n    event PaymentsProcessed(uint256 processedCount, uint256 timestamp);\\n    event AutomationConfigured(address indexed core, uint256 timestamp);\\n    event AutomationEnabled(address indexed company);\\n    event AutomationDisabled(address indexed company);\\n\\n    // Core functions\\n    function processPaymentBatch() external returns (uint256);\\n    function enableAutomation() external;\\n    function disableAutomation() external;\\n\\n    // View functions\\n    function automatedCompanies(address company) external view returns (bool);\\n    function AUTOMATION_ROLE() external view returns (bytes32);\\n    function lastProcessedTime() external view returns (uint256);\\n    function PROCESSING_INTERVAL() external view returns (uint256);\\n    function MAX_BATCH_SIZE() external view returns (uint256);\\n    function core() external view returns (address);\\n    function paused() external view returns (bool);\\n}\",\"keccak256\":\"0xe30d16928442c19e92a376ffb22c46d1e5ce290502c369f576532450af0a4a92\",\"license\":\"MIT\"},\"contracts/interfaces/IPaythenaCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IPaythenaCore {\\n    // Structs\\n    struct Contributor {\\n        string name;\\n        uint256 salary;\\n        uint256 lastPayment;\\n        uint256 nextPayment;\\n        uint256 paymentFrequency;\\n        uint256 lastProcessedTime;\\n        bool isActive;\\n    }\\n\\n    struct Company {\\n        string name;\\n        uint256 balance;\\n        uint256 contributorCount;\\n        bool isActive;\\n        address admin;\\n        mapping(address => Contributor) contributors;\\n        address[] contributorAddresses;\\n    }\\n\\n    // Role functions\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    // Role constants\\n    function COMPANY_ROLE() external view returns (bytes32);\\n    function CONTRIBUTOR_ROLE() external view returns (bytes32);\\n    function AUTOMATION_ROLE() external view returns (bytes32);\\n    function INTEGRATION_ROLE() external view returns (bytes32);\\n\\n    // Integration functions\\n    function setAutomationContract(address _automationContract) external;\\n    function getStakedAmount(address account) external view returns (uint256);\\n    function getLoanBalance(address account) external view returns (uint256);\\n    function processPaymentBatch(address[] calldata contributors) external returns (uint256);\\n\\n    // Events\\n    event CompanyRegistered(address indexed company, string name, uint256 timestamp);\\n    event ContributorAdded(address indexed company, address indexed contributor, string name, uint256 salary, uint256 timestamp);\\n    event ContributorRemoved(address indexed company, address indexed contributor, uint256 timestamp);\\n    event SalaryProcessed(address indexed company, address indexed contributor, uint256 amount, uint256 timestamp);\\n    event FundsDeposited(address indexed company, uint256 amount, uint256 timestamp);\\n    event FundsWithdrawn(address indexed company, uint256 amount, uint256 timestamp);\\n    event PaymentProcessed(uint256 indexed paymentId, address indexed company, address indexed contributor, uint256 amount, bytes32 txHash, uint256 timestamp);\\n    event AutomationContractUpdated(address indexed oldContract, address indexed newContract);\\n    event IntegrationError(string reason, bytes data);\\n\\n    // Core functions\\n    function registerCompany(string calldata name) external;\\n    function addContributor(address contributor, string calldata name, uint256 salary, uint256 paymentFrequency) external;\\n    function removeContributor(address contributor) external;\\n    function processSalary(address contributor) external;\\n    function deposit(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n\\n    // View functions\\n    function getCompanyDetails(address company) external view returns (\\n        string memory name,\\n        uint256 balance,\\n        uint256 contributorCount,\\n        bool isActive,\\n        address admin\\n    );\\n\\n    function getContributorDetails(address company, address contributor) external view returns (\\n        string memory name,\\n        uint256 salary,\\n        uint256 nextPayment,\\n        uint256 paymentFrequency,\\n        bool isActive,\\n        uint256 lastProcessedTime\\n    );\\n\\n    function isPaymentDue(address company, address contributor) external view returns (bool);\\n    function canProcessPayment(address company) external view returns (bool);\\n    function getActiveCompanies() external view returns (address[] memory);\\n    function getActiveContributors(address company) external view returns (address[] memory);\\n    function getTotalPayroll(address company) external view returns (uint256);\\n}\",\"keccak256\":\"0xaad3a12adbe6cf187db0db95057eff083e2265f8e0714d9686a374ef767e3e63\",\"license\":\"MIT\"},\"contracts/interfaces/IPaythenaLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// Export the enum so it can be imported\\nenum LoanStatus { \\n    None,\\n    Pending,\\n    Approved,\\n    Active,\\n    Completed,\\n    Defaulted,\\n    Rejected\\n}\\n\\ninterface IPaythenaLoan {\\n    // Use the enum in the interface\\n    function getLoanDetails(address borrower) external view returns (\\n        uint256 amount,\\n        uint256 totalDue,\\n        uint256 monthlyPayment,\\n        uint256 remainingAmount,\\n        uint256 nextPaymentDue,\\n        LoanStatus status\\n    );\\n    \\n    // Events\\n    event LoanRequested(address indexed borrower, uint256 amount, uint256 duration, string purpose, uint256 timestamp);\\n    event LoanApproved(address indexed borrower, uint256 amount, uint256 duration, uint256 interestRate);\\n    event LoanCompleted(address indexed borrower, uint256 totalPaid);\\n    event PaymentMade(address indexed borrower, uint256 amount, uint256 remainingBalance);\\n    event LoanDefaulted(address indexed borrower, uint256 remainingAmount);\\n    event CreditScoreUpdated(address indexed borrower, uint256 newScore);\\n\\n    // Core functions\\n    function requestLoan(uint256 amount, uint256 duration, string calldata purpose) external;\\n    function approveLoan(address borrower, uint256 interestRate) external;\\n    function makePayment(uint256 amount) external;\\n    function checkLoanDefault(address borrower) external;\\n\\n    // View functions\\n    function getLoanBalance(address account) external view returns (uint256);\\n    function getCreditScore(address borrower) external view returns (uint256);\\n    function paused() external view returns (bool);\\n}\",\"keccak256\":\"0xb4e49718b107dcae854ac333e08b6f39e38e7d5029f3658258283d9fe8bfc8dc\",\"license\":\"MIT\"},\"contracts/interfaces/IPaythenaStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IPaythenaStaking {\\n    // Events\\n    event Staked(address indexed user, uint256 amount, uint256 timestamp);\\n    event Unstaked(address indexed user, uint256 amount, uint256 timestamp);\\n    event RewardsClaimed(address indexed user, uint256 amount, uint256 timestamp);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate, uint256 timestamp);\\n    event EmergencyWithdraw(address indexed user, uint256 amount, uint256 timestamp);\\n\\n    // Core functions\\n    function stake(uint256 amount) external;\\n    function unstake(uint256 amount) external;\\n    function claimRewards() external;\\n    function emergencyWithdraw() external;\\n\\n    // View functions\\n    function getStakedAmount(address account) external view returns (uint256);\\n    function getRewards(address account) external view returns (uint256);\\n    function getPendingRewards(address account) external view returns (uint256);\\n    function rewardRate() external view returns (uint256);\\n    function totalStaked() external view returns (uint256);\\n    function paused() external view returns (bool);\\n}\",\"keccak256\":\"0xcfd33d8e16a4bebbf821e581c0ff29a9376c7b9ccbf81d145b8b3d783dc5c856\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040527f9e1688b53537f356172ce07f39e129155063957163c5f9462d4d9e55b228b06c6080527fe2889e7308860b3fe8df0daa86fccfea4d71e43776719a57be28cf90b6db81e960a0527f85d36e3b488c35c2a15344b305cb84e2000f26d4f3a7c1e8a516f0e82aee752a60c0527f5f924c6b1faae42f36fa6b66af882e9a987aefb9164fceeea420ca4168959c6660e0526001600b55348015620000a757600080fd5b506040516200347038038062003470833981016040819052620000ca9162000232565b60016000556002805460ff191690556001600160a01b038216620001015760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038116620001295760405163e6c4247b60e01b815260040160405180910390fd5b60028054610100600160a81b0319166101006001600160a01b038581169190910291909117909155600380546001600160a01b031916918316919091179055620001756000336200017e565b5050506200026a565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff166200020b5760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016200020f565b5060005b92915050565b80516001600160a01b03811681146200022d57600080fd5b919050565b600080604083850312156200024657600080fd5b620002518362000215565b9150620002616020840162000215565b90509250929050565b60805160a05160c05160e05161317f620002f160003960006103740152600081816103ad015281816113e801528181611414015261243a01526000818161068501528181611b360152611ef101526000818161032f015281816107cb01528181610c79015281816114940152818161193e01528181611dee0152611f78015261317f6000f3fe608060405234801561001057600080fd5b50600436106102895760003560e01c8063560decd01161015c578063a217fddf116100ce578063d547741f11610087578063d547741f1461063b578063e1e3a7e01461064e578063e82e1c1014610670578063eafb79e214610683578063ee99205c146106a9578063eff64809146106c157600080fd5b8063a217fddf146105c2578063aa4704f3146105ca578063afba8f5a146105f8578063b3f3ab5c14610602578063b6b55f2514610615578063ca3539251461062857600080fd5b80638a7824a0116101205780638a7824a01461054357806391d1485414610556578063920ab59f14610569578063961b766e1461057c57806398e9373a146105865780639dd373b9146105af57600080fd5b8063560decd0146104e35780635c975abb1461050a57806362909f0a146105155780636dfc2a6f146105285780638456cb591461053b57600080fd5b80632a7405531161020057806336568abe116101b957806336568abe1461045d5780633f4ba83a1461047057806342de081b1461047857806347a0cb57146104935780634af1094e146104a65780634da6a556146104d057600080fd5b80632a740553146103e45780632c784a8f146104095780632e1a7d4d146104115780632f2ff15d1461042457806331d3880614610437578063355e6ce81461044a57600080fd5b80631c9ee11a116102525780631c9ee11a1461032d57806321176f9a1461035d57806322cdbe6a14610372578063248a9ca31461039857806324c20eec146103ab578063253f284b146103d157600080fd5b80625441941461028e57806301ffc9a7146102a35780630558d3e9146102cb5780630689d5ed146102ef5780630fd80f7e1461031a575b600080fd5b6102a161029c366004612b04565b6106d4565b005b6102b66102b1366004612b46565b610844565b60405190151581526020015b60405180910390f35b6102de6102d9366004612b8c565b61087b565b6040516102c2959493929190612bf7565b600454610302906001600160a01b031681565b6040516001600160a01b0390911681526020016102c2565b6102b6610328366004612b8c565b610960565b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016102c2565b6103656109b9565b6040516102c29190612c37565b7f000000000000000000000000000000000000000000000000000000000000000061034f565b61034f6103a6366004612c84565b610b51565b7f000000000000000000000000000000000000000000000000000000000000000061034f565b600354610302906001600160a01b031681565b6103f76103f2366004612c9d565b610b68565b6040516102c296959493929190612cd0565b61034f600a81565b6102a161041f366004612c84565b610c64565b6102a1610432366004612d0e565b610db7565b6102a1610445366004612b8c565b610dc1565b6102de610458366004612b8c565b610e41565b6102a161046b366004612d0e565b610f06565b6102a1610f10565b61030273426e7d03f9803dd11cb8616c65b99a3c0afea6de81565b61034f6104a1366004612b8c565b610f23565b6104ae610f93565b60408051948552602085019390935291830152151560608201526080016102c2565b61034f6104de366004612b8c565b611172565b6104eb6111aa565b60408051931515845291151560208401521515908201526060016102c2565b60025460ff166102b6565b6102a1610523366004612b8c565b611361565b6102a1610536366004612b8c565b61147f565b6102a1611819565b61034f610551366004612b8c565b61182c565b6102b6610564366004612d0e565b6118fb565b6102a1610577366004612d31565b611929565b61034f62278d0081565b610302610594366004612b8c565b6006602052600090815260409020546001600160a01b031681565b6102a16105bd366004612b8c565b611bc0565b61034f600081565b6105dd6105d8366004612b8c565b611c46565b604080519384526020840192909252908201526060016102c2565b61034f6201518081565b6102a1610610366004612b8c565b611dd9565b6102a1610623366004612c84565b611f63565b6102b6610636366004612c9d565b612080565b6102a1610649366004612d0e565b6120e9565b61066161065c366004612b8c565b6120f3565b6040516102c293929190612d96565b61036561067e366004612b8c565b61227f565b7f000000000000000000000000000000000000000000000000000000000000000061034f565b6002546103029061010090046001600160a01b031681565b61034f6106cf366004612dd0565b612436565b6106dc612613565b6106e461263d565b60008190036107065760405163162908e360e11b815260040160405180910390fd5b3360009081526005602052604090206003015460ff161561073a57604051631936b76760e11b815260040160405180910390fd5b33600090815260056020526040902080610755838583612ee3565b5060006001828101829055600283018290556003830180546001600160a81b03191661010033908102919091178317909155600a805492830181559092527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b031916821790556107f0907f000000000000000000000000000000000000000000000000000000000000000090612663565b50336001600160a01b03167e78dab93f1aeefc09535aa58402d91dde97c29a340cd7a0a57e12529c94e21484844260405161082d93929190612fcc565b60405180910390a2506108406001600055565b5050565b60006001600160e01b03198216637965db0b60e01b148061087557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b038082166000908152600560205260408120600181015460028201546003830154835460609686958695869591948594919360ff821692610100909204169085906108cc90612e5b565b80601f01602080910402602001604051908101604052809291908181526020018280546108f890612e5b565b80156109455780601f1061091a57610100808354040283529160200191610945565b820191906000526020600020905b81548152906001019060200180831161092857829003601f168201915b50505050509450955095509550955095505091939590929450565b6001600160a01b0381166000908152600560205260408120600381015460ff16158061098e575060025460ff165b1561099c5750600092915050565b60006109a78461182c565b60019092015491909110159392505050565b60606000805b600a54811015610a305760056000600a83815481106109e0576109e0612ff0565b60009182526020808320909101546001600160a01b0316835282019290925260400190206003015460ff1615610a1e5781610a1a8161301c565b9250505b80610a288161301c565b9150506109bf565b5060008167ffffffffffffffff811115610a4c57610a4c612e45565b604051908082528060200260200182016040528015610a75578160200160208202803683370190505b5090506000805b600a54811015610b485760056000600a8381548110610a9d57610a9d612ff0565b60009182526020808320909101546001600160a01b0316835282019290925260400190206003015460ff1615610b3657600a8181548110610ae057610ae0612ff0565b9060005260206000200160009054906101000a90046001600160a01b0316838381518110610b1057610b10612ff0565b6001600160a01b039092166020928302919091019091015281610b328161301c565b9250505b80610b408161301c565b915050610a7c565b50909392505050565b600081815260016020819052604082200154610875565b6001600160a01b0380831660009081526005602081815260408084209486168452600494850190915282206001810154600382015494820154600683015493830154835460609787968796879687969195869591949360ff16918690610bcd90612e5b565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf990612e5b565b8015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b50505050509550965096509650965096509650509295509295509295565b610c6c612613565b610c7461263d565b610c9e7f0000000000000000000000000000000000000000000000000000000000000000336118fb565b610cbb57604051631a27eac360e11b815260040160405180910390fd5b80600003610cdc5760405163162908e360e11b815260040160405180910390fd5b336000908152600560205260409020600381015460ff16610d1057604051630245e10f60e51b815260040160405180910390fd5b8181600101541015610d3557604051631e9acf1760e31b815260040160405180910390fd5b81816001016000828254610d499190613035565b90915550610d6e905073426e7d03f9803dd11cb8616c65b99a3c0afea6de33846126dc565b6040805183815242602082015233917ffbc3a599b784fe88772fc5abcc07223f64ca0b13acc341f4fb1e46bef0510eb491015b60405180910390a250610db46001600055565b50565b6108408282612740565b6000610dcc81612762565b6001600160a01b038216610df35760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b03163b600003610e1e5760405163e6c4247b60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b600560205260009081526040902080548190610e5c90612e5b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8890612e5b565b8015610ed55780601f10610eaa57610100808354040283529160200191610ed5565b820191906000526020600020905b815481529060010190602001808311610eb857829003601f168201915b50505050600183015460028401546003909401549293909290915060ff81169061010090046001600160a01b031685565b610840828261276c565b6000610f1b81612762565b610db461279f565b6003546040516347a0cb5760e01b81526001600160a01b03838116600483015260009216906347a0cb57906024015b602060405180830381865afa158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108759190613048565b6004546000908190819081906001600160a01b0316610fbd5750600092508291508190508061116c565b6004805460408051631569d07f60e21b815290516001600160a01b03909216926355a741fc9282820192602092908290030181865afa925050508015611020575060408051601f3d908101601f1916820190925261101d91810190613048565b60015b61104357600080600061103560025460ff1690565b15935093509350935061116c565b60048054604080516333f6fc9560e21b815290516001600160a01b039092169263cfdbf2549282820192602092908290030181865afa9250505080156110a6575060408051601f3d908101601f191682019092526110a391810190613048565b60015b6110c957806000806110ba60025460ff1690565b1594509450945094505061116c565b60048054604080516331e4c7fd60e11b815290516001600160a01b03909216926363c98ffa9282820192602092908290030181865afa92505050801561112c575060408051601f3d908101601f1916820190925261112991810190613048565b60015b611150578181600061114060025460ff1690565b159550955095509550505061116c565b82828261115f60025460ff1690565b1596509650965096505050505b90919293565b6002546040516326d352ab60e11b81526001600160a01b03838116600483015260009261010090041690634da6a55690602401610f52565b6002546000908190819061010090046001600160a01b0316158015906112445750600260019054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561121e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112429190613061565b155b6003549093506001600160a01b0316158015906112d55750600360009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d39190613061565b155b6004549092506001600160a01b03161580159061135a57506004805460408051635c975abb60e01b815290516001600160a01b0390921692635c975abb9282820192602092908290030181865afa158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190613061565b155b9050909192565b600061136c81612762565b6001600160a01b0382166113935760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b03163b6000036113be5760405163e6c4247b60e01b815260040160405180910390fd5b600480546001600160a01b038481166001600160a01b031983161790925516801561140f5761140d7f0000000000000000000000000000000000000000000000000000000000000000826127f1565b505b6114397f000000000000000000000000000000000000000000000000000000000000000084612663565b50826001600160a01b0316816001600160a01b03167f4a187f3ac38868f39de8723a1005de90d9c78e65ca0c858247d767426f5b4f5160405160405180910390a3505050565b611487612613565b61148f61263d565b6114b97f0000000000000000000000000000000000000000000000000000000000000000336118fb565b6114d657604051631a27eac360e11b815260040160405180910390fd5b336000908152600560205260409020600381015460ff1661150a57604051630245e10f60e51b815260040160405180910390fd5b6001600160a01b03821660009081526004820160205260409020600681015460ff1661154957604051632fbfa62560e11b815260040160405180910390fd5b806003015442101561156e5760405163424e8d7160e01b815260040160405180910390fd5b80600101548260010154101561159757604051631e9acf1760e31b815260040160405180910390fd5b600b8054600091826115a88361301c565b909155506040516bffffffffffffffffffffffff1933606090811b8216602084015287901b1660348201526048810182905242606882015290915060009060880160408051601f1981840301815291815281516020928301206000818152600990935291205490915060ff16156116325760405163424e8d7160e01b815260040160405180910390fd5b6000818152600960205260408120805460ff1916600190811790915584810154908601805491929091611666908490613035565b90915550504260028401819055600484015461168191613083565b836003018190555042836005018190555060006040518060a001604052808481526020018381526020014281526020018560010154815260200160011515815250905060086000336001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555050506117b686856001015473426e7d03f9803dd11cb8616c65b99a3c0afea6de6001600160a01b03166126dc9092919063ffffffff16565b6001840154604080519182526020820184905242908201526001600160a01b03871690339085907fbab3cfc9d6a10712ad8dfb8d2a5816fbd3e5816106f7bb643302ca34df1f67b39060600160405180910390a45050505050610db46001600055565b600061182481612762565b610db461285e565b6001600160a01b0381166000908152600560205260408120600381015460ff166118595750600092915050565b6000805b60058301548110156118f357600083600501828154811061188057611880612ff0565b60009182526020808320909101546001600160a01b03168083526004870190915260409091206006015490915060ff16156118e0576001600160a01b03811660009081526004850160205260409020600101546118dd9084613083565b92505b50806118eb8161301c565b91505061185d565b509392505050565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff165b9392505050565b611931612613565b61193961263d565b6119637f0000000000000000000000000000000000000000000000000000000000000000336118fb565b61198057604051631a27eac360e11b815260040160405180910390fd5b6001600160a01b0385166119a75760405163e6c4247b60e01b815260040160405180910390fd5b60008390036119c95760405163162908e360e11b815260040160405180910390fd5b816000036119ea5760405163162908e360e11b815260040160405180910390fd5b620151808110806119fd575062278d0081115b15611a1b5760405163e3c2448f60e01b815260040160405180910390fd5b336000908152600560205260409020600381015460ff16611a4f57604051630245e10f60e51b815260040160405180910390fd5b6001600160a01b03861660009081526004820160205260409020600681015460ff1615611a8f57604051632fbfa62560e11b815260040160405180910390fd5b80611a9b868883612ee3565b506001810184905560048101839055611ab48342613083565b600382015560068101805460ff19166001179055426005820155600282018054906000611ae08361301c565b90915550506005820180546001810182556000918252602080832090910180546001600160a01b038b166001600160a01b0319918216811790925590835260069091526040909120805490911633179055611b5b7f000000000000000000000000000000000000000000000000000000000000000088612663565b50866001600160a01b0316336001600160a01b03167faed431cd04d6e4f7ac218a44e05908c2dd6b872fe4b9350d1eb6b1e099f509b288888842604051611ba59493929190613096565b60405180910390a35050611bb96001600055565b5050505050565b6000611bcb81612762565b6001600160a01b038216611bf25760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b03163b600003611c1d5760405163e6c4247b60e01b815260040160405180910390fd5b50600280546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6002546040516326d352ab60e11b81526001600160a01b0383811660048301526000928392839261010090920490911690634da6a55690602401602060405180830381865afa925050508015611cb9575060408051601f3d908101601f19168201909252611cb691810190613048565b60015b611ccb57506000915081905080611dd2565b60025460405163f6ed201760e01b81526001600160a01b0387811660048301526101009092049091169063f6ed201790602401602060405180830381865afa925050508015611d37575060408051601f3d908101601f19168201909252611d3491810190613048565b60015b611d4957925060009150819050611dd2565b600260019054906101000a90046001600160a01b03166001600160a01b0316637b0a47ee6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611db8575060408051601f3d908101601f19168201909252611db591810190613048565b60015b611dca57909350915060009050611dd2565b919450925090505b9193909250565b611de1612613565b611de961263d565b611e137f0000000000000000000000000000000000000000000000000000000000000000336118fb565b611e3057604051631a27eac360e11b815260040160405180910390fd5b336000908152600560205260409020600381015460ff16611e6457604051630245e10f60e51b815260040160405180910390fd5b6001600160a01b03821660009081526004820160205260409020600681015460ff16611ea357604051632fbfa62560e11b815260040160405180910390fd5b60068101805460ff19169055600282018054906000611ec1836130bd565b90915550506001600160a01b038316600090815260066020526040902080546001600160a01b0319169055611f167f0000000000000000000000000000000000000000000000000000000000000000846127f1565b506040514281526001600160a01b0384169033907f2ab800b74f4f863677eacf1ea75679786772c656a00c1e0d68cb526fce217a3d9060200160405180910390a35050610db46001600055565b611f6b612613565b611f7361263d565b611f9d7f0000000000000000000000000000000000000000000000000000000000000000336118fb565b611fba57604051631a27eac360e11b815260040160405180910390fd5b80600003611fdb5760405163162908e360e11b815260040160405180910390fd5b336000908152600560205260409020600381015460ff1661200f57604051630245e10f60e51b815260040160405180910390fd5b818160010160008282546120239190613083565b90915550612049905073426e7d03f9803dd11cb8616c65b99a3c0afea6de33308561289b565b6040805183815242602082015233917fbee4fe3675934fca827426c793623996a3079255089bda3a717019ffc5db27659101610da1565b6001600160a01b0382166000908152600560205260408120600381015460ff166120ae576000915050610875565b6001600160a01b03831660009081526004820160205260409020600681015460ff1680156120e0575080600301544210155b95945050505050565b61084082826128d4565b600354604051637453ed4760e11b81526001600160a01b038381166004830152600092839283929091169063e8a7da8e9060240160c060405180830381865afa925050508015612160575060408051601f3d908101601f1916820190925261215d918101906130d4565b60015b61217257506000915081905080611dd2565b6003546040516347a0cb5760e01b81526001600160a01b038c81166004830152909116906347a0cb5790602401602060405180830381865afa9250505080156121d8575060408051601f3d908101601f191682019092526121d591810190613048565b60015b6121f057600098508897509550611dd2945050505050565b60035460405163d3dd2bdf60e01b81526001600160a01b038d811660048301529091169063d3dd2bdf90602401602060405180830381865afa925050508015612256575060408051601f3d908101601f1916820190925261225391810190613048565b60015b61226d579850600097509550611dd2945050505050565b90995097509550611dd2945050505050565b6001600160a01b038116600090815260056020526040902060038101546060919060ff166122c057604051630245e10f60e51b815260040160405180910390fd5b6000805b600583015481101561233b578260040160008460050183815481106122eb576122eb612ff0565b60009182526020808320909101546001600160a01b0316835282019290925260400190206006015460ff161561232957816123258161301c565b9250505b806123338161301c565b9150506122c4565b5060008167ffffffffffffffff81111561235757612357612e45565b604051908082528060200260200182016040528015612380578160200160208202803683370190505b5090506000805b600585015481101561242b5760008560050182815481106123aa576123aa612ff0565b60009182526020808320909101546001600160a01b03168083526004890190915260409091206006015490915060ff161561241857808484815181106123f2576123f2612ff0565b6001600160a01b0390921660209283029190910190910152826124148161301c565b9350505b50806124238161301c565b915050612387565b509095945050505050565b60007f000000000000000000000000000000000000000000000000000000000000000061246281612762565b61246a612613565b61247261263d565b6004546001600160a01b0316331461249d57604051631a27eac360e11b815260040160405180910390fd5b6000805b848110156125ff5760008686838181106124bd576124bd612ff0565b90506020020160208101906124d29190612b8c565b6001600160a01b03808216600090815260066020526040902054919250166124fa8183612080565b6125055750506125ed565b61250e81610960565b6125195750506125ed565b604051636dfc2a6f60e01b81526001600160a01b03831660048201523090636dfc2a6f90602401600060405180830381600087803b15801561255a57600080fd5b505af192505050801561256b575060015b6125dd577f35ca5a6b925e6b7d3fa69fb4673c8e327177ef46b66f3febd3c33636eca57fb06040516125ce906040808252600e908201526d14185e5b595b9d0819985a5b195960921b606082015260806020820181905260009082015260a00190565b60405180910390a150506125ed565b836125e78161301c565b94505050505b806125f78161301c565b9150506124a1565b50915061260c6001600055565b5092915050565b60026000540361263657604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60025460ff16156126615760405163d93c066560e01b815260040160405180910390fd5b565b600061266f83836118fb565b6126d45760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a4506001610875565b506000610875565b6040516001600160a01b0383811660248301526044820183905261273b91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506128f0565b505050565b61274982610b51565b61275281612762565b61275c8383612663565b50505050565b610db48133612958565b6001600160a01b03811633146127955760405163334bd91960e11b815260040160405180910390fd5b61273b82826127f1565b6127a7612991565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006127fd83836118fb565b156126d45760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610875565b61286661263d565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586127d43390565b6040516001600160a01b03848116602483015283811660448301526064820183905261275c9186918216906323b872dd90608401612709565b6128dd82610b51565b6128e681612762565b61275c83836127f1565b60006129056001600160a01b038416836129b4565b9050805160001415801561292a5750808060200190518101906129289190613061565b155b1561273b57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b61296282826118fb565b6108405760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161294f565b60025460ff1661266157604051638dfc202b60e01b815260040160405180910390fd5b60606119228383600084600080856001600160a01b031684866040516129da919061312d565b60006040518083038185875af1925050503d8060008114612a17576040519150601f19603f3d011682016040523d82523d6000602084013e612a1c565b606091505b5091509150612a2c868383612a36565b9695505050505050565b606082612a4b57612a4682612a92565b611922565b8151158015612a6257506001600160a01b0384163b155b15612a8b57604051639996b31560e01b81526001600160a01b038516600482015260240161294f565b5080611922565b805115612aa25780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60008083601f840112612acd57600080fd5b50813567ffffffffffffffff811115612ae557600080fd5b602083019150836020828501011115612afd57600080fd5b9250929050565b60008060208385031215612b1757600080fd5b823567ffffffffffffffff811115612b2e57600080fd5b612b3a85828601612abb565b90969095509350505050565b600060208284031215612b5857600080fd5b81356001600160e01b03198116811461192257600080fd5b80356001600160a01b0381168114612b8757600080fd5b919050565b600060208284031215612b9e57600080fd5b61192282612b70565b60005b83811015612bc2578181015183820152602001612baa565b50506000910152565b60008151808452612be3816020860160208601612ba7565b601f01601f19169290920160200192915050565b60a081526000612c0a60a0830188612bcb565b602083019690965250604081019390935290151560608301526001600160a01b0316608090910152919050565b6020808252825182820181905260009190848201906040850190845b81811015612c785783516001600160a01b031683529284019291840191600101612c53565b50909695505050505050565b600060208284031215612c9657600080fd5b5035919050565b60008060408385031215612cb057600080fd5b612cb983612b70565b9150612cc760208401612b70565b90509250929050565b60c081526000612ce360c0830189612bcb565b602083019790975250604081019490945260608401929092521515608083015260a090910152919050565b60008060408385031215612d2157600080fd5b82359150612cc760208401612b70565b600080600080600060808688031215612d4957600080fd5b612d5286612b70565b9450602086013567ffffffffffffffff811115612d6e57600080fd5b612d7a88828901612abb565b9699909850959660408101359660609091013595509350505050565b838152602081018390526060810160078310612dc257634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b60008060208385031215612de357600080fd5b823567ffffffffffffffff80821115612dfb57600080fd5b818501915085601f830112612e0f57600080fd5b813581811115612e1e57600080fd5b8660208260051b8501011115612e3357600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680612e6f57607f821691505b602082108103612e8f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561273b57600081815260208120601f850160051c81016020861015612ebc5750805b601f850160051c820191505b81811015612edb57828155600101612ec8565b505050505050565b67ffffffffffffffff831115612efb57612efb612e45565b612f0f83612f098354612e5b565b83612e95565b6000601f841160018114612f435760008515612f2b5750838201355b600019600387901b1c1916600186901b178355611bb9565b600083815260209020601f19861690835b82811015612f745786850135825560209485019460019092019101612f54565b5086821015612f915760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000612fe0604083018587612fa3565b9050826020830152949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161302e5761302e613006565b5060010190565b8181038181111561087557610875613006565b60006020828403121561305a57600080fd5b5051919050565b60006020828403121561307357600080fd5b8151801515811461192257600080fd5b8082018082111561087557610875613006565b6060815260006130aa606083018688612fa3565b6020830194909452506040015292915050565b6000816130cc576130cc613006565b506000190190565b60008060008060008060c087890312156130ed57600080fd5b865195506020870151945060408701519350606087015192506080870151915060a08701516007811061311f57600080fd5b809150509295509295509295565b6000825161313f818460208701612ba7565b919091019291505056fea2646970667358221220c9cc9ecd798a111bae2a80e80ba1a31d5defd658ed5681962bf5ca93656d04f864736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102895760003560e01c8063560decd01161015c578063a217fddf116100ce578063d547741f11610087578063d547741f1461063b578063e1e3a7e01461064e578063e82e1c1014610670578063eafb79e214610683578063ee99205c146106a9578063eff64809146106c157600080fd5b8063a217fddf146105c2578063aa4704f3146105ca578063afba8f5a146105f8578063b3f3ab5c14610602578063b6b55f2514610615578063ca3539251461062857600080fd5b80638a7824a0116101205780638a7824a01461054357806391d1485414610556578063920ab59f14610569578063961b766e1461057c57806398e9373a146105865780639dd373b9146105af57600080fd5b8063560decd0146104e35780635c975abb1461050a57806362909f0a146105155780636dfc2a6f146105285780638456cb591461053b57600080fd5b80632a7405531161020057806336568abe116101b957806336568abe1461045d5780633f4ba83a1461047057806342de081b1461047857806347a0cb57146104935780634af1094e146104a65780634da6a556146104d057600080fd5b80632a740553146103e45780632c784a8f146104095780632e1a7d4d146104115780632f2ff15d1461042457806331d3880614610437578063355e6ce81461044a57600080fd5b80631c9ee11a116102525780631c9ee11a1461032d57806321176f9a1461035d57806322cdbe6a14610372578063248a9ca31461039857806324c20eec146103ab578063253f284b146103d157600080fd5b80625441941461028e57806301ffc9a7146102a35780630558d3e9146102cb5780630689d5ed146102ef5780630fd80f7e1461031a575b600080fd5b6102a161029c366004612b04565b6106d4565b005b6102b66102b1366004612b46565b610844565b60405190151581526020015b60405180910390f35b6102de6102d9366004612b8c565b61087b565b6040516102c2959493929190612bf7565b600454610302906001600160a01b031681565b6040516001600160a01b0390911681526020016102c2565b6102b6610328366004612b8c565b610960565b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016102c2565b6103656109b9565b6040516102c29190612c37565b7f000000000000000000000000000000000000000000000000000000000000000061034f565b61034f6103a6366004612c84565b610b51565b7f000000000000000000000000000000000000000000000000000000000000000061034f565b600354610302906001600160a01b031681565b6103f76103f2366004612c9d565b610b68565b6040516102c296959493929190612cd0565b61034f600a81565b6102a161041f366004612c84565b610c64565b6102a1610432366004612d0e565b610db7565b6102a1610445366004612b8c565b610dc1565b6102de610458366004612b8c565b610e41565b6102a161046b366004612d0e565b610f06565b6102a1610f10565b61030273426e7d03f9803dd11cb8616c65b99a3c0afea6de81565b61034f6104a1366004612b8c565b610f23565b6104ae610f93565b60408051948552602085019390935291830152151560608201526080016102c2565b61034f6104de366004612b8c565b611172565b6104eb6111aa565b60408051931515845291151560208401521515908201526060016102c2565b60025460ff166102b6565b6102a1610523366004612b8c565b611361565b6102a1610536366004612b8c565b61147f565b6102a1611819565b61034f610551366004612b8c565b61182c565b6102b6610564366004612d0e565b6118fb565b6102a1610577366004612d31565b611929565b61034f62278d0081565b610302610594366004612b8c565b6006602052600090815260409020546001600160a01b031681565b6102a16105bd366004612b8c565b611bc0565b61034f600081565b6105dd6105d8366004612b8c565b611c46565b604080519384526020840192909252908201526060016102c2565b61034f6201518081565b6102a1610610366004612b8c565b611dd9565b6102a1610623366004612c84565b611f63565b6102b6610636366004612c9d565b612080565b6102a1610649366004612d0e565b6120e9565b61066161065c366004612b8c565b6120f3565b6040516102c293929190612d96565b61036561067e366004612b8c565b61227f565b7f000000000000000000000000000000000000000000000000000000000000000061034f565b6002546103029061010090046001600160a01b031681565b61034f6106cf366004612dd0565b612436565b6106dc612613565b6106e461263d565b60008190036107065760405163162908e360e11b815260040160405180910390fd5b3360009081526005602052604090206003015460ff161561073a57604051631936b76760e11b815260040160405180910390fd5b33600090815260056020526040902080610755838583612ee3565b5060006001828101829055600283018290556003830180546001600160a81b03191661010033908102919091178317909155600a805492830181559092527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b031916821790556107f0907f000000000000000000000000000000000000000000000000000000000000000090612663565b50336001600160a01b03167e78dab93f1aeefc09535aa58402d91dde97c29a340cd7a0a57e12529c94e21484844260405161082d93929190612fcc565b60405180910390a2506108406001600055565b5050565b60006001600160e01b03198216637965db0b60e01b148061087557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b038082166000908152600560205260408120600181015460028201546003830154835460609686958695869591948594919360ff821692610100909204169085906108cc90612e5b565b80601f01602080910402602001604051908101604052809291908181526020018280546108f890612e5b565b80156109455780601f1061091a57610100808354040283529160200191610945565b820191906000526020600020905b81548152906001019060200180831161092857829003601f168201915b50505050509450955095509550955095505091939590929450565b6001600160a01b0381166000908152600560205260408120600381015460ff16158061098e575060025460ff165b1561099c5750600092915050565b60006109a78461182c565b60019092015491909110159392505050565b60606000805b600a54811015610a305760056000600a83815481106109e0576109e0612ff0565b60009182526020808320909101546001600160a01b0316835282019290925260400190206003015460ff1615610a1e5781610a1a8161301c565b9250505b80610a288161301c565b9150506109bf565b5060008167ffffffffffffffff811115610a4c57610a4c612e45565b604051908082528060200260200182016040528015610a75578160200160208202803683370190505b5090506000805b600a54811015610b485760056000600a8381548110610a9d57610a9d612ff0565b60009182526020808320909101546001600160a01b0316835282019290925260400190206003015460ff1615610b3657600a8181548110610ae057610ae0612ff0565b9060005260206000200160009054906101000a90046001600160a01b0316838381518110610b1057610b10612ff0565b6001600160a01b039092166020928302919091019091015281610b328161301c565b9250505b80610b408161301c565b915050610a7c565b50909392505050565b600081815260016020819052604082200154610875565b6001600160a01b0380831660009081526005602081815260408084209486168452600494850190915282206001810154600382015494820154600683015493830154835460609787968796879687969195869591949360ff16918690610bcd90612e5b565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf990612e5b565b8015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b50505050509550965096509650965096509650509295509295509295565b610c6c612613565b610c7461263d565b610c9e7f0000000000000000000000000000000000000000000000000000000000000000336118fb565b610cbb57604051631a27eac360e11b815260040160405180910390fd5b80600003610cdc5760405163162908e360e11b815260040160405180910390fd5b336000908152600560205260409020600381015460ff16610d1057604051630245e10f60e51b815260040160405180910390fd5b8181600101541015610d3557604051631e9acf1760e31b815260040160405180910390fd5b81816001016000828254610d499190613035565b90915550610d6e905073426e7d03f9803dd11cb8616c65b99a3c0afea6de33846126dc565b6040805183815242602082015233917ffbc3a599b784fe88772fc5abcc07223f64ca0b13acc341f4fb1e46bef0510eb491015b60405180910390a250610db46001600055565b50565b6108408282612740565b6000610dcc81612762565b6001600160a01b038216610df35760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b03163b600003610e1e5760405163e6c4247b60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b600560205260009081526040902080548190610e5c90612e5b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8890612e5b565b8015610ed55780601f10610eaa57610100808354040283529160200191610ed5565b820191906000526020600020905b815481529060010190602001808311610eb857829003601f168201915b50505050600183015460028401546003909401549293909290915060ff81169061010090046001600160a01b031685565b610840828261276c565b6000610f1b81612762565b610db461279f565b6003546040516347a0cb5760e01b81526001600160a01b03838116600483015260009216906347a0cb57906024015b602060405180830381865afa158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108759190613048565b6004546000908190819081906001600160a01b0316610fbd5750600092508291508190508061116c565b6004805460408051631569d07f60e21b815290516001600160a01b03909216926355a741fc9282820192602092908290030181865afa925050508015611020575060408051601f3d908101601f1916820190925261101d91810190613048565b60015b61104357600080600061103560025460ff1690565b15935093509350935061116c565b60048054604080516333f6fc9560e21b815290516001600160a01b039092169263cfdbf2549282820192602092908290030181865afa9250505080156110a6575060408051601f3d908101601f191682019092526110a391810190613048565b60015b6110c957806000806110ba60025460ff1690565b1594509450945094505061116c565b60048054604080516331e4c7fd60e11b815290516001600160a01b03909216926363c98ffa9282820192602092908290030181865afa92505050801561112c575060408051601f3d908101601f1916820190925261112991810190613048565b60015b611150578181600061114060025460ff1690565b159550955095509550505061116c565b82828261115f60025460ff1690565b1596509650965096505050505b90919293565b6002546040516326d352ab60e11b81526001600160a01b03838116600483015260009261010090041690634da6a55690602401610f52565b6002546000908190819061010090046001600160a01b0316158015906112445750600260019054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561121e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112429190613061565b155b6003549093506001600160a01b0316158015906112d55750600360009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d39190613061565b155b6004549092506001600160a01b03161580159061135a57506004805460408051635c975abb60e01b815290516001600160a01b0390921692635c975abb9282820192602092908290030181865afa158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190613061565b155b9050909192565b600061136c81612762565b6001600160a01b0382166113935760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b03163b6000036113be5760405163e6c4247b60e01b815260040160405180910390fd5b600480546001600160a01b038481166001600160a01b031983161790925516801561140f5761140d7f0000000000000000000000000000000000000000000000000000000000000000826127f1565b505b6114397f000000000000000000000000000000000000000000000000000000000000000084612663565b50826001600160a01b0316816001600160a01b03167f4a187f3ac38868f39de8723a1005de90d9c78e65ca0c858247d767426f5b4f5160405160405180910390a3505050565b611487612613565b61148f61263d565b6114b97f0000000000000000000000000000000000000000000000000000000000000000336118fb565b6114d657604051631a27eac360e11b815260040160405180910390fd5b336000908152600560205260409020600381015460ff1661150a57604051630245e10f60e51b815260040160405180910390fd5b6001600160a01b03821660009081526004820160205260409020600681015460ff1661154957604051632fbfa62560e11b815260040160405180910390fd5b806003015442101561156e5760405163424e8d7160e01b815260040160405180910390fd5b80600101548260010154101561159757604051631e9acf1760e31b815260040160405180910390fd5b600b8054600091826115a88361301c565b909155506040516bffffffffffffffffffffffff1933606090811b8216602084015287901b1660348201526048810182905242606882015290915060009060880160408051601f1981840301815291815281516020928301206000818152600990935291205490915060ff16156116325760405163424e8d7160e01b815260040160405180910390fd5b6000818152600960205260408120805460ff1916600190811790915584810154908601805491929091611666908490613035565b90915550504260028401819055600484015461168191613083565b836003018190555042836005018190555060006040518060a001604052808481526020018381526020014281526020018560010154815260200160011515815250905060086000336001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555050506117b686856001015473426e7d03f9803dd11cb8616c65b99a3c0afea6de6001600160a01b03166126dc9092919063ffffffff16565b6001840154604080519182526020820184905242908201526001600160a01b03871690339085907fbab3cfc9d6a10712ad8dfb8d2a5816fbd3e5816106f7bb643302ca34df1f67b39060600160405180910390a45050505050610db46001600055565b600061182481612762565b610db461285e565b6001600160a01b0381166000908152600560205260408120600381015460ff166118595750600092915050565b6000805b60058301548110156118f357600083600501828154811061188057611880612ff0565b60009182526020808320909101546001600160a01b03168083526004870190915260409091206006015490915060ff16156118e0576001600160a01b03811660009081526004850160205260409020600101546118dd9084613083565b92505b50806118eb8161301c565b91505061185d565b509392505050565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff165b9392505050565b611931612613565b61193961263d565b6119637f0000000000000000000000000000000000000000000000000000000000000000336118fb565b61198057604051631a27eac360e11b815260040160405180910390fd5b6001600160a01b0385166119a75760405163e6c4247b60e01b815260040160405180910390fd5b60008390036119c95760405163162908e360e11b815260040160405180910390fd5b816000036119ea5760405163162908e360e11b815260040160405180910390fd5b620151808110806119fd575062278d0081115b15611a1b5760405163e3c2448f60e01b815260040160405180910390fd5b336000908152600560205260409020600381015460ff16611a4f57604051630245e10f60e51b815260040160405180910390fd5b6001600160a01b03861660009081526004820160205260409020600681015460ff1615611a8f57604051632fbfa62560e11b815260040160405180910390fd5b80611a9b868883612ee3565b506001810184905560048101839055611ab48342613083565b600382015560068101805460ff19166001179055426005820155600282018054906000611ae08361301c565b90915550506005820180546001810182556000918252602080832090910180546001600160a01b038b166001600160a01b0319918216811790925590835260069091526040909120805490911633179055611b5b7f000000000000000000000000000000000000000000000000000000000000000088612663565b50866001600160a01b0316336001600160a01b03167faed431cd04d6e4f7ac218a44e05908c2dd6b872fe4b9350d1eb6b1e099f509b288888842604051611ba59493929190613096565b60405180910390a35050611bb96001600055565b5050505050565b6000611bcb81612762565b6001600160a01b038216611bf25760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b03163b600003611c1d5760405163e6c4247b60e01b815260040160405180910390fd5b50600280546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6002546040516326d352ab60e11b81526001600160a01b0383811660048301526000928392839261010090920490911690634da6a55690602401602060405180830381865afa925050508015611cb9575060408051601f3d908101601f19168201909252611cb691810190613048565b60015b611ccb57506000915081905080611dd2565b60025460405163f6ed201760e01b81526001600160a01b0387811660048301526101009092049091169063f6ed201790602401602060405180830381865afa925050508015611d37575060408051601f3d908101601f19168201909252611d3491810190613048565b60015b611d4957925060009150819050611dd2565b600260019054906101000a90046001600160a01b03166001600160a01b0316637b0a47ee6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611db8575060408051601f3d908101601f19168201909252611db591810190613048565b60015b611dca57909350915060009050611dd2565b919450925090505b9193909250565b611de1612613565b611de961263d565b611e137f0000000000000000000000000000000000000000000000000000000000000000336118fb565b611e3057604051631a27eac360e11b815260040160405180910390fd5b336000908152600560205260409020600381015460ff16611e6457604051630245e10f60e51b815260040160405180910390fd5b6001600160a01b03821660009081526004820160205260409020600681015460ff16611ea357604051632fbfa62560e11b815260040160405180910390fd5b60068101805460ff19169055600282018054906000611ec1836130bd565b90915550506001600160a01b038316600090815260066020526040902080546001600160a01b0319169055611f167f0000000000000000000000000000000000000000000000000000000000000000846127f1565b506040514281526001600160a01b0384169033907f2ab800b74f4f863677eacf1ea75679786772c656a00c1e0d68cb526fce217a3d9060200160405180910390a35050610db46001600055565b611f6b612613565b611f7361263d565b611f9d7f0000000000000000000000000000000000000000000000000000000000000000336118fb565b611fba57604051631a27eac360e11b815260040160405180910390fd5b80600003611fdb5760405163162908e360e11b815260040160405180910390fd5b336000908152600560205260409020600381015460ff1661200f57604051630245e10f60e51b815260040160405180910390fd5b818160010160008282546120239190613083565b90915550612049905073426e7d03f9803dd11cb8616c65b99a3c0afea6de33308561289b565b6040805183815242602082015233917fbee4fe3675934fca827426c793623996a3079255089bda3a717019ffc5db27659101610da1565b6001600160a01b0382166000908152600560205260408120600381015460ff166120ae576000915050610875565b6001600160a01b03831660009081526004820160205260409020600681015460ff1680156120e0575080600301544210155b95945050505050565b61084082826128d4565b600354604051637453ed4760e11b81526001600160a01b038381166004830152600092839283929091169063e8a7da8e9060240160c060405180830381865afa925050508015612160575060408051601f3d908101601f1916820190925261215d918101906130d4565b60015b61217257506000915081905080611dd2565b6003546040516347a0cb5760e01b81526001600160a01b038c81166004830152909116906347a0cb5790602401602060405180830381865afa9250505080156121d8575060408051601f3d908101601f191682019092526121d591810190613048565b60015b6121f057600098508897509550611dd2945050505050565b60035460405163d3dd2bdf60e01b81526001600160a01b038d811660048301529091169063d3dd2bdf90602401602060405180830381865afa925050508015612256575060408051601f3d908101601f1916820190925261225391810190613048565b60015b61226d579850600097509550611dd2945050505050565b90995097509550611dd2945050505050565b6001600160a01b038116600090815260056020526040902060038101546060919060ff166122c057604051630245e10f60e51b815260040160405180910390fd5b6000805b600583015481101561233b578260040160008460050183815481106122eb576122eb612ff0565b60009182526020808320909101546001600160a01b0316835282019290925260400190206006015460ff161561232957816123258161301c565b9250505b806123338161301c565b9150506122c4565b5060008167ffffffffffffffff81111561235757612357612e45565b604051908082528060200260200182016040528015612380578160200160208202803683370190505b5090506000805b600585015481101561242b5760008560050182815481106123aa576123aa612ff0565b60009182526020808320909101546001600160a01b03168083526004890190915260409091206006015490915060ff161561241857808484815181106123f2576123f2612ff0565b6001600160a01b0390921660209283029190910190910152826124148161301c565b9350505b50806124238161301c565b915050612387565b509095945050505050565b60007f000000000000000000000000000000000000000000000000000000000000000061246281612762565b61246a612613565b61247261263d565b6004546001600160a01b0316331461249d57604051631a27eac360e11b815260040160405180910390fd5b6000805b848110156125ff5760008686838181106124bd576124bd612ff0565b90506020020160208101906124d29190612b8c565b6001600160a01b03808216600090815260066020526040902054919250166124fa8183612080565b6125055750506125ed565b61250e81610960565b6125195750506125ed565b604051636dfc2a6f60e01b81526001600160a01b03831660048201523090636dfc2a6f90602401600060405180830381600087803b15801561255a57600080fd5b505af192505050801561256b575060015b6125dd577f35ca5a6b925e6b7d3fa69fb4673c8e327177ef46b66f3febd3c33636eca57fb06040516125ce906040808252600e908201526d14185e5b595b9d0819985a5b195960921b606082015260806020820181905260009082015260a00190565b60405180910390a150506125ed565b836125e78161301c565b94505050505b806125f78161301c565b9150506124a1565b50915061260c6001600055565b5092915050565b60026000540361263657604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60025460ff16156126615760405163d93c066560e01b815260040160405180910390fd5b565b600061266f83836118fb565b6126d45760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a4506001610875565b506000610875565b6040516001600160a01b0383811660248301526044820183905261273b91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506128f0565b505050565b61274982610b51565b61275281612762565b61275c8383612663565b50505050565b610db48133612958565b6001600160a01b03811633146127955760405163334bd91960e11b815260040160405180910390fd5b61273b82826127f1565b6127a7612991565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006127fd83836118fb565b156126d45760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610875565b61286661263d565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586127d43390565b6040516001600160a01b03848116602483015283811660448301526064820183905261275c9186918216906323b872dd90608401612709565b6128dd82610b51565b6128e681612762565b61275c83836127f1565b60006129056001600160a01b038416836129b4565b9050805160001415801561292a5750808060200190518101906129289190613061565b155b1561273b57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b61296282826118fb565b6108405760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161294f565b60025460ff1661266157604051638dfc202b60e01b815260040160405180910390fd5b60606119228383600084600080856001600160a01b031684866040516129da919061312d565b60006040518083038185875af1925050503d8060008114612a17576040519150601f19603f3d011682016040523d82523d6000602084013e612a1c565b606091505b5091509150612a2c868383612a36565b9695505050505050565b606082612a4b57612a4682612a92565b611922565b8151158015612a6257506001600160a01b0384163b155b15612a8b57604051639996b31560e01b81526001600160a01b038516600482015260240161294f565b5080611922565b805115612aa25780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60008083601f840112612acd57600080fd5b50813567ffffffffffffffff811115612ae557600080fd5b602083019150836020828501011115612afd57600080fd5b9250929050565b60008060208385031215612b1757600080fd5b823567ffffffffffffffff811115612b2e57600080fd5b612b3a85828601612abb565b90969095509350505050565b600060208284031215612b5857600080fd5b81356001600160e01b03198116811461192257600080fd5b80356001600160a01b0381168114612b8757600080fd5b919050565b600060208284031215612b9e57600080fd5b61192282612b70565b60005b83811015612bc2578181015183820152602001612baa565b50506000910152565b60008151808452612be3816020860160208601612ba7565b601f01601f19169290920160200192915050565b60a081526000612c0a60a0830188612bcb565b602083019690965250604081019390935290151560608301526001600160a01b0316608090910152919050565b6020808252825182820181905260009190848201906040850190845b81811015612c785783516001600160a01b031683529284019291840191600101612c53565b50909695505050505050565b600060208284031215612c9657600080fd5b5035919050565b60008060408385031215612cb057600080fd5b612cb983612b70565b9150612cc760208401612b70565b90509250929050565b60c081526000612ce360c0830189612bcb565b602083019790975250604081019490945260608401929092521515608083015260a090910152919050565b60008060408385031215612d2157600080fd5b82359150612cc760208401612b70565b600080600080600060808688031215612d4957600080fd5b612d5286612b70565b9450602086013567ffffffffffffffff811115612d6e57600080fd5b612d7a88828901612abb565b9699909850959660408101359660609091013595509350505050565b838152602081018390526060810160078310612dc257634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b60008060208385031215612de357600080fd5b823567ffffffffffffffff80821115612dfb57600080fd5b818501915085601f830112612e0f57600080fd5b813581811115612e1e57600080fd5b8660208260051b8501011115612e3357600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680612e6f57607f821691505b602082108103612e8f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561273b57600081815260208120601f850160051c81016020861015612ebc5750805b601f850160051c820191505b81811015612edb57828155600101612ec8565b505050505050565b67ffffffffffffffff831115612efb57612efb612e45565b612f0f83612f098354612e5b565b83612e95565b6000601f841160018114612f435760008515612f2b5750838201355b600019600387901b1c1916600186901b178355611bb9565b600083815260209020601f19861690835b82811015612f745786850135825560209485019460019092019101612f54565b5086821015612f915760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000612fe0604083018587612fa3565b9050826020830152949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161302e5761302e613006565b5060010190565b8181038181111561087557610875613006565b60006020828403121561305a57600080fd5b5051919050565b60006020828403121561307357600080fd5b8151801515811461192257600080fd5b8082018082111561087557610875613006565b6060815260006130aa606083018688612fa3565b6020830194909452506040015292915050565b6000816130cc576130cc613006565b506000190190565b60008060008060008060c087890312156130ed57600080fd5b865195506020870151945060408701519350606087015192506080870151915060a08701516007811061311f57600080fd5b809150509295509295509295565b6000825161313f818460208701612ba7565b919091019291505056fea2646970667358221220c9cc9ecd798a111bae2a80e80ba1a31d5defd658ed5681962bf5ca93656d04f864736f6c63430008140033",
  "devdoc": {
    "details": "Handles company registration, contributor management, and payroll processing",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_loanContract": "Address of loan contract",
          "_stakingContract": "Address of staking contract"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "PaythenaCore",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Contract constructor"
      }
    },
    "notice": "Main contract for Paythena payroll system",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1193,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 26,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 1074,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1670,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "stakingContract",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(IPaythenaStaking)5994"
      },
      {
        "astId": 1673,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "loanContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPaythenaLoan)5899"
      },
      {
        "astId": 1676,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "automationContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPaythenaAutomation)5469"
      },
      {
        "astId": 1701,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "companies",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Company)5505_storage)"
      },
      {
        "astId": 1705,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "contributorToCompany",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1711,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "paymentHistories",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(PaymentHistory)1650_storage)dyn_storage)"
      },
      {
        "astId": 1719,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "paymentRecords",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(PaymentRecord)1661_storage)dyn_storage))"
      },
      {
        "astId": 1723,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "processedTxs",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1726,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "companyAddresses",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1729,
        "contract": "contracts/PaythenaCore.sol:PaythenaCore",
        "label": "nextPaymentId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PaymentHistory)1650_storage)dyn_storage": {
        "base": "t_struct(PaymentHistory)1650_storage",
        "encoding": "dynamic_array",
        "label": "struct PaythenaCore.PaymentHistory[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PaymentRecord)1661_storage)dyn_storage": {
        "base": "t_struct(PaymentRecord)1661_storage",
        "encoding": "dynamic_array",
        "label": "struct PaythenaCore.PaymentRecord[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPaythenaAutomation)5469": {
        "encoding": "inplace",
        "label": "contract IPaythenaAutomation",
        "numberOfBytes": "20"
      },
      "t_contract(IPaythenaLoan)5899": {
        "encoding": "inplace",
        "label": "contract IPaythenaLoan",
        "numberOfBytes": "20"
      },
      "t_contract(IPaythenaStaking)5994": {
        "encoding": "inplace",
        "label": "contract IPaythenaStaking",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(PaymentHistory)1650_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PaythenaCore.PaymentHistory[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PaymentHistory)1650_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(PaymentRecord)1661_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PaythenaCore.PaymentRecord[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PaymentRecord)1661_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(PaymentRecord)1661_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct PaythenaCore.PaymentRecord[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(PaymentRecord)1661_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_struct(Company)5505_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPaythenaCore.Company)",
        "numberOfBytes": "32",
        "value": "t_struct(Company)5505_storage"
      },
      "t_mapping(t_address,t_struct(Contributor)5486_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPaythenaCore.Contributor)",
        "numberOfBytes": "32",
        "value": "t_struct(Contributor)5486_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Company)5505_storage": {
        "encoding": "inplace",
        "label": "struct IPaythenaCore.Company",
        "members": [
          {
            "astId": 5488,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5490,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5492,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "contributorCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5494,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "isActive",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 5496,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "admin",
            "offset": 1,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5501,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "contributors",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(Contributor)5486_storage)"
          },
          {
            "astId": 5504,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "contributorAddresses",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Contributor)5486_storage": {
        "encoding": "inplace",
        "label": "struct IPaythenaCore.Contributor",
        "members": [
          {
            "astId": 5473,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5475,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "salary",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5477,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "lastPayment",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5479,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "nextPayment",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5481,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "paymentFrequency",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5483,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "lastProcessedTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5485,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "isActive",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(PaymentHistory)1650_storage": {
        "encoding": "inplace",
        "label": "struct PaythenaCore.PaymentHistory",
        "members": [
          {
            "astId": 1645,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1647,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1649,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PaymentRecord)1661_storage": {
        "encoding": "inplace",
        "label": "struct PaythenaCore.PaymentRecord",
        "members": [
          {
            "astId": 1652,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "paymentId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1654,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "txHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1656,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1658,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1660,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "processed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/PaythenaCore.sol:PaythenaCore",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}