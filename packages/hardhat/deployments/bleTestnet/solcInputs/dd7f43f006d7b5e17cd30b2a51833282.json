{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IPaythenaAutomation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IPaythenaAutomation {\n    // Events\n    event PaymentsProcessed(uint256 processedCount, uint256 timestamp);\n    event AutomationConfigured(address indexed core, uint256 timestamp);\n    event AutomationEnabled(address indexed company);\n    event AutomationDisabled(address indexed company);\n\n    // Core functions\n    function processPaymentBatch() external returns (uint256);\n    function enableAutomation() external;\n    function disableAutomation() external;\n\n    // View functions\n    function automatedCompanies(address company) external view returns (bool);\n    function AUTOMATION_ROLE() external view returns (bytes32);\n    function lastProcessedTime() external view returns (uint256);\n    function PROCESSING_INTERVAL() external view returns (uint256);\n    function MAX_BATCH_SIZE() external view returns (uint256);\n    function core() external view returns (address);\n    function paused() external view returns (bool);\n}"
    },
    "contracts/interfaces/IPaythenaCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IPaythenaCore {\n    // Structs\n    struct Contributor {\n        string name;\n        uint256 salary;\n        uint256 lastPayment;\n        uint256 nextPayment;\n        uint256 paymentFrequency;\n        uint256 lastProcessedTime;\n        bool isActive;\n    }\n\n    struct Company {\n        string name;\n        uint256 balance;\n        uint256 contributorCount;\n        bool isActive;\n        address admin;\n        mapping(address => Contributor) contributors;\n        address[] contributorAddresses;\n    }\n\n    // Role functions\n    function hasRole(bytes32 role, address account) external view returns (bool);\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n    function grantRole(bytes32 role, address account) external;\n    function revokeRole(bytes32 role, address account) external;\n    function renounceRole(bytes32 role, address account) external;\n\n    // Role constants\n    function COMPANY_ROLE() external view returns (bytes32);\n    function CONTRIBUTOR_ROLE() external view returns (bytes32);\n    function AUTOMATION_ROLE() external view returns (bytes32);\n    function INTEGRATION_ROLE() external view returns (bytes32);\n\n    // Integration functions\n    function setAutomationContract(address _automationContract) external;\n    function getStakedAmount(address account) external view returns (uint256);\n    function getLoanBalance(address account) external view returns (uint256);\n    function processPaymentBatch(address[] calldata contributors) external returns (uint256);\n\n    // Events\n    event CompanyRegistered(address indexed company, string name, uint256 timestamp);\n    event ContributorAdded(address indexed company, address indexed contributor, string name, uint256 salary, uint256 timestamp);\n    event ContributorRemoved(address indexed company, address indexed contributor, uint256 timestamp);\n    event SalaryProcessed(address indexed company, address indexed contributor, uint256 amount, uint256 timestamp);\n    event FundsDeposited(address indexed company, uint256 amount, uint256 timestamp);\n    event FundsWithdrawn(address indexed company, uint256 amount, uint256 timestamp);\n    event PaymentProcessed(uint256 indexed paymentId, address indexed company, address indexed contributor, uint256 amount, bytes32 txHash, uint256 timestamp);\n    event AutomationContractUpdated(address indexed oldContract, address indexed newContract);\n    event IntegrationError(string reason, bytes data);\n\n    // Core functions\n    function registerCompany(string calldata name) external;\n    function addContributor(address contributor, string calldata name, uint256 salary, uint256 paymentFrequency) external;\n    function removeContributor(address contributor) external;\n    function processSalary(address contributor) external;\n    function deposit(uint256 amount) external;\n    function withdraw(uint256 amount) external;\n\n    // View functions\n    function getCompanyDetails(address company) external view returns (\n        string memory name,\n        uint256 balance,\n        uint256 contributorCount,\n        bool isActive,\n        address admin\n    );\n\n    function getContributorDetails(address company, address contributor) external view returns (\n        string memory name,\n        uint256 salary,\n        uint256 nextPayment,\n        uint256 paymentFrequency,\n        bool isActive,\n        uint256 lastProcessedTime\n    );\n\n    function isPaymentDue(address company, address contributor) external view returns (bool);\n    function canProcessPayment(address company) external view returns (bool);\n    function getActiveCompanies() external view returns (address[] memory);\n    function getActiveContributors(address company) external view returns (address[] memory);\n    function getTotalPayroll(address company) external view returns (uint256);\n}"
    },
    "contracts/interfaces/IPaythenaLoan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n// Export the enum so it can be imported\nenum LoanStatus { \n    None,\n    Pending,\n    Approved,\n    Active,\n    Completed,\n    Defaulted,\n    Rejected\n}\n\ninterface IPaythenaLoan {\n    // Use the enum in the interface\n    function getLoanDetails(address borrower) external view returns (\n        uint256 amount,\n        uint256 totalDue,\n        uint256 monthlyPayment,\n        uint256 remainingAmount,\n        uint256 nextPaymentDue,\n        LoanStatus status\n    );\n    \n    // Events\n    event LoanRequested(address indexed borrower, uint256 amount, uint256 duration, string purpose, uint256 timestamp);\n    event LoanApproved(address indexed borrower, uint256 amount, uint256 duration, uint256 interestRate);\n    event LoanCompleted(address indexed borrower, uint256 totalPaid);\n    event PaymentMade(address indexed borrower, uint256 amount, uint256 remainingBalance);\n    event LoanDefaulted(address indexed borrower, uint256 remainingAmount);\n    event CreditScoreUpdated(address indexed borrower, uint256 newScore);\n\n    // Core functions\n    function requestLoan(uint256 amount, uint256 duration, string calldata purpose) external;\n    function approveLoan(address borrower, uint256 interestRate) external;\n    function makePayment(uint256 amount) external;\n    function checkLoanDefault(address borrower) external;\n\n    // View functions\n    function getLoanBalance(address account) external view returns (uint256);\n    function getCreditScore(address borrower) external view returns (uint256);\n    function paused() external view returns (bool);\n}"
    },
    "contracts/interfaces/IPaythenaStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IPaythenaStaking {\n    // Events\n    event Staked(address indexed user, uint256 amount, uint256 timestamp);\n    event Unstaked(address indexed user, uint256 amount, uint256 timestamp);\n    event RewardsClaimed(address indexed user, uint256 amount, uint256 timestamp);\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate, uint256 timestamp);\n    event EmergencyWithdraw(address indexed user, uint256 amount, uint256 timestamp);\n\n    // Core functions\n    function stake(uint256 amount) external;\n    function unstake(uint256 amount) external;\n    function claimRewards() external;\n    function emergencyWithdraw() external;\n\n    // View functions\n    function getStakedAmount(address account) external view returns (uint256);\n    function getRewards(address account) external view returns (uint256);\n    function getPendingRewards(address account) external view returns (uint256);\n    function rewardRate() external view returns (uint256);\n    function totalStaked() external view returns (uint256);\n    function paused() external view returns (bool);\n}"
    },
    "contracts/PaythenaAutomation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./interfaces/IPaythenaCore.sol\";\n\ncontract PaythenaAutomation is ReentrancyGuard, AccessControl, Pausable {\n    using Address for address;\n\n    bytes32 public constant AUTOMATION_ROLE = keccak256(\"AUTOMATION_ROLE\");\n    \n    address public immutable core;\n    uint256 public lastProcessedTime;\n    uint256 public constant PROCESSING_INTERVAL = 1 days;\n    uint256 public constant MAX_BATCH_SIZE = 50;\n\n    mapping(address => bool) public automatedCompanies;\n\n    event PaymentsProcessed(\n        uint256 processedCount,\n        uint256 timestamp\n    );\n\n    event AutomationConfigured(\n        address indexed core,\n        uint256 timestamp\n    );\n\n    event AutomationEnabled(address indexed company);\n    event AutomationDisabled(address indexed company);\n    \n    constructor(address _core) {\n        require(_core != address(0), \"Invalid core address\");\n        require(_core.code.length > 0, \"Core must be contract\");\n        \n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(AUTOMATION_ROLE, msg.sender);\n        \n        core = _core;\n        lastProcessedTime = block.timestamp;\n\n        emit AutomationConfigured(_core, block.timestamp);\n    }\n    \n    function processPaymentBatch() \n        external \n        nonReentrant \n        whenNotPaused \n        onlyRole(AUTOMATION_ROLE) \n        returns (uint256)\n    {\n        require(\n            block.timestamp >= lastProcessedTime + PROCESSING_INTERVAL,\n            \"Too early\"\n        );\n\n        IPaythenaCore coreContract = IPaythenaCore(core);\n        uint256 processedCount = 0;\n\n        // Process payments for each company\n        address[] memory companies = coreContract.getActiveCompanies();\n        for (uint256 i = 0; i < companies.length && processedCount < MAX_BATCH_SIZE; i++) {\n            address company = companies[i];\n            if (!coreContract.canProcessPayment(company)) continue;\n\n            address[] memory contributors = coreContract.getActiveContributors(company);\n            for (uint256 j = 0; j < contributors.length && processedCount < MAX_BATCH_SIZE; j++) {\n                address contributor = contributors[j];\n                if (coreContract.isPaymentDue(company, contributor)) {\n                    try coreContract.processSalary(contributor) {\n                        processedCount++;\n                    } catch {\n                        continue;\n                    }\n                }\n            }\n        }\n\n        lastProcessedTime = block.timestamp;\n        emit PaymentsProcessed(processedCount, block.timestamp);\n        return processedCount;\n    }\n\n    function pause() \n        external \n        onlyRole(DEFAULT_ADMIN_ROLE) \n    {\n        _pause();\n    }\n\n    function unpause() \n        external \n        onlyRole(DEFAULT_ADMIN_ROLE) \n    {\n        _unpause();\n    }\n\n    function enableAutomation() external {\n        require(!automatedCompanies[msg.sender], \"Already automated\");\n        automatedCompanies[msg.sender] = true;\n        emit AutomationEnabled(msg.sender);\n    }\n\n    function disableAutomation() external {\n        require(automatedCompanies[msg.sender], \"Not automated\");\n        automatedCompanies[msg.sender] = false;\n        emit AutomationDisabled(msg.sender);\n    }\n}"
    },
    "contracts/PaythenaCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./interfaces/IPaythenaCore.sol\";\nimport \"./interfaces/IPaythenaStaking.sol\";\nimport \"./interfaces/IPaythenaLoan.sol\";\nimport \"./interfaces/IPaythenaAutomation.sol\";\nimport {LoanStatus} from \"./interfaces/IPaythenaLoan.sol\";\n\n/**\n * @title PaythenaCore\n * @notice Main contract for Paythena payroll system\n * @dev Handles company registration, contributor management, and payroll processing\n */\ncontract PaythenaCore is IPaythenaCore, ReentrancyGuard, AccessControl, Pausable {\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    // Additional structs for internal use\n    struct PaymentHistory {\n        uint256 amount;\n        uint256 timestamp;\n        string description;\n    }\n\n    struct PaymentRecord {\n        uint256 paymentId;\n        bytes32 txHash;\n        uint256 timestamp;\n        uint256 amount;\n        bool processed;\n    }\n\n    // State variables\n    IERC20 public constant USDE = IERC20(0x426E7d03f9803Dd11cb8616C65b99a3c0AfeA6dE);\n    IPaythenaStaking public stakingContract;\n    IPaythenaLoan public loanContract;\n    IPaythenaAutomation public automationContract;\n\n    // Role constants as immutable bytes32\n    bytes32 private immutable _COMPANY_ROLE = keccak256(\"COMPANY_ROLE\");\n    bytes32 private immutable _CONTRIBUTOR_ROLE = keccak256(\"CONTRIBUTOR_ROLE\");\n    bytes32 private immutable _AUTOMATION_ROLE = keccak256(\"AUTOMATION_ROLE\");\n    bytes32 private immutable _INTEGRATION_ROLE = keccak256(\"INTEGRATION_ROLE\");\n\n    // Storage\n    mapping(address => Company) public companies;\n    mapping(address => address) public contributorToCompany;\n    mapping(address => PaymentHistory[]) private paymentHistories;\n    mapping(address => mapping(address => PaymentRecord[])) private paymentRecords;\n    mapping(bytes32 => bool) private processedTxs;\n    address[] private companyAddresses;\n    uint256 private nextPaymentId = 1;\n\n    // Constants\n    uint256 public constant MIN_PAYMENT_FREQUENCY = 1 days;    // 86400 seconds\n    uint256 public constant MAX_PAYMENT_FREQUENCY = 30 days;   // 2592000 seconds\n    uint256 public constant MAX_PAYMENT_HISTORY = 10;\n\n    // Custom errors\n    error InvalidAmount();\n    error CompanyNotActive();\n    error CompanyAlreadyRegistered();\n    error InvalidContributor();\n    error InsufficientBalance();\n    error UnauthorizedAccess();\n    error InvalidAddress();\n    error InvalidFrequency();\n    error ContributorNotActive();\n    error PaymentAlreadyProcessed();\n\n    /**\n     * @notice Contract constructor\n     * @param _stakingContract Address of staking contract\n     * @param _loanContract Address of loan contract\n     */\n    constructor(\n        address _stakingContract,\n        address _loanContract\n    ) {\n        if (_stakingContract == address(0)) revert InvalidAddress();\n        if (_loanContract == address(0)) revert InvalidAddress();\n\n        stakingContract = IPaythenaStaking(_stakingContract);\n        loanContract = IPaythenaLoan(_loanContract);\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    // Integration functions\n    function setAutomationContract(address _automationContract) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (_automationContract == address(0)) revert InvalidAddress();\n        if (_automationContract.code.length == 0) revert InvalidAddress();\n        \n        address oldContract = address(automationContract);\n        automationContract = IPaythenaAutomation(_automationContract);\n        \n        if (oldContract != address(0)) {\n            _revokeRole(_AUTOMATION_ROLE, oldContract);\n        }\n        _grantRole(_AUTOMATION_ROLE, _automationContract);\n        \n        emit AutomationContractUpdated(oldContract, _automationContract);\n    }\n\n    function getStakedAmount(address account) external view override returns (uint256) {\n        return stakingContract.getStakedAmount(account);\n    }\n\n    function getLoanBalance(address account) external view override returns (uint256) {\n        return loanContract.getLoanBalance(account);\n    }\n\n    // Override AccessControl functions\n    function hasRole(bytes32 role, address account) \n        public \n        view \n        virtual \n        override(IPaythenaCore, AccessControl) \n        returns (bool) \n    {\n        return super.hasRole(role, account);\n    }\n\n    function getRoleAdmin(bytes32 role)\n        public\n        view\n        virtual\n        override(IPaythenaCore, AccessControl)\n        returns (bytes32)\n    {\n        return super.getRoleAdmin(role);\n    }\n\n    function grantRole(bytes32 role, address account)\n        public\n        virtual\n        override(IPaythenaCore, AccessControl)\n    {\n        super.grantRole(role, account);\n    }\n\n    function revokeRole(bytes32 role, address account)\n        public\n        virtual\n        override(IPaythenaCore, AccessControl)\n    {\n        super.revokeRole(role, account);\n    }\n\n    function renounceRole(bytes32 role, address account)\n        public\n        virtual\n        override(IPaythenaCore, AccessControl)\n    {\n        super.renounceRole(role, account);\n    }\n\n    // Role getters\n    function COMPANY_ROLE() external view override returns (bytes32) {\n        return _COMPANY_ROLE;\n    }\n\n    function CONTRIBUTOR_ROLE() external view override returns (bytes32) {\n        return _CONTRIBUTOR_ROLE;\n    }\n\n    function AUTOMATION_ROLE() external view override returns (bytes32) {\n        return _AUTOMATION_ROLE;\n    }\n\n    function INTEGRATION_ROLE() external view override returns (bytes32) {\n        return _INTEGRATION_ROLE;\n    }\n\n    // Core functions\n    function registerCompany(string calldata name) external override nonReentrant whenNotPaused {\n        if (bytes(name).length == 0) revert InvalidAmount();\n        if (companies[msg.sender].isActive) revert CompanyAlreadyRegistered();\n        \n        Company storage newCompany = companies[msg.sender];\n        newCompany.name = name;\n        newCompany.balance = 0;\n        newCompany.contributorCount = 0;\n        newCompany.isActive = true;\n        newCompany.admin = msg.sender;\n        \n        companyAddresses.push(msg.sender);\n        _grantRole(_COMPANY_ROLE, msg.sender);\n        \n        emit CompanyRegistered(msg.sender, name, block.timestamp);\n    }\n\n    function addContributor(\n        address contributor,\n        string calldata name,\n        uint256 salary,\n        uint256 paymentFrequency\n    ) external override nonReentrant whenNotPaused {\n        if (!hasRole(_COMPANY_ROLE, msg.sender)) revert UnauthorizedAccess();\n        if (contributor == address(0)) revert InvalidAddress();\n        if (bytes(name).length == 0) revert InvalidAmount();\n        if (salary == 0) revert InvalidAmount();\n        if (paymentFrequency < MIN_PAYMENT_FREQUENCY || \n            paymentFrequency > MAX_PAYMENT_FREQUENCY) revert InvalidFrequency();\n\n        Company storage company = companies[msg.sender];\n        if (!company.isActive) revert CompanyNotActive();\n\n        Contributor storage cont = company.contributors[contributor];\n        if (cont.isActive) revert ContributorNotActive();\n\n        cont.name = name;\n        cont.salary = salary;\n        cont.paymentFrequency = paymentFrequency;\n        cont.nextPayment = block.timestamp + paymentFrequency;\n        cont.isActive = true;\n        cont.lastProcessedTime = block.timestamp;\n\n        company.contributorCount++;\n        company.contributorAddresses.push(contributor);\n        contributorToCompany[contributor] = msg.sender;\n        _grantRole(_CONTRIBUTOR_ROLE, contributor);\n\n        emit ContributorAdded(msg.sender, contributor, name, salary, block.timestamp);\n    }\n\n    function removeContributor(address contributor) external override nonReentrant whenNotPaused {\n        if (!hasRole(_COMPANY_ROLE, msg.sender)) revert UnauthorizedAccess();\n        \n        Company storage company = companies[msg.sender];\n        if (!company.isActive) revert CompanyNotActive();\n        \n        Contributor storage cont = company.contributors[contributor];\n        if (!cont.isActive) revert ContributorNotActive();\n        \n        cont.isActive = false;\n        company.contributorCount--;\n        contributorToCompany[contributor] = address(0);\n        _revokeRole(_CONTRIBUTOR_ROLE, contributor);\n        \n        emit ContributorRemoved(msg.sender, contributor, block.timestamp);\n    }\n\n    function processSalary(address contributor) external override nonReentrant whenNotPaused {\n        if (!hasRole(_COMPANY_ROLE, msg.sender)) revert UnauthorizedAccess();\n        \n        Company storage company = companies[msg.sender];\n        if (!company.isActive) revert CompanyNotActive();\n\n        Contributor storage cont = company.contributors[contributor];\n        if (!cont.isActive) revert ContributorNotActive();\n        if (block.timestamp < cont.nextPayment) revert PaymentAlreadyProcessed();\n        if (company.balance < cont.salary) revert InsufficientBalance();\n\n        uint256 paymentId = nextPaymentId++;\n        bytes32 txHash = keccak256(abi.encodePacked(\n            msg.sender,\n            contributor,\n            paymentId,\n            block.timestamp\n        ));\n\n        if (processedTxs[txHash]) revert PaymentAlreadyProcessed();\n        processedTxs[txHash] = true;\n\n        company.balance -= cont.salary;\n        cont.lastPayment = block.timestamp;\n        cont.nextPayment = block.timestamp + cont.paymentFrequency;\n        cont.lastProcessedTime = block.timestamp;\n\n        PaymentRecord memory record = PaymentRecord({\n            paymentId: paymentId,\n            txHash: txHash,\n            timestamp: block.timestamp,\n            amount: cont.salary,\n            processed: true\n        });\n\n        paymentRecords[msg.sender][contributor].push(record);\n        USDE.safeTransfer(contributor, cont.salary);\n\n        emit PaymentProcessed(\n            paymentId,\n            msg.sender,\n            contributor,\n            cont.salary,\n            txHash,\n            block.timestamp\n        );\n    }\n\n    // Fund management functions\n    function deposit(uint256 amount) external override nonReentrant whenNotPaused {\n        if (!hasRole(_COMPANY_ROLE, msg.sender)) revert UnauthorizedAccess();\n        if (amount == 0) revert InvalidAmount();\n        \n        Company storage company = companies[msg.sender];\n        if (!company.isActive) revert CompanyNotActive();\n\n        company.balance += amount;\n        USDE.safeTransferFrom(msg.sender, address(this), amount);\n        \n        emit FundsDeposited(msg.sender, amount, block.timestamp);\n    }\n\n    function withdraw(uint256 amount) external override nonReentrant whenNotPaused {\n        if (!hasRole(_COMPANY_ROLE, msg.sender)) revert UnauthorizedAccess();\n        if (amount == 0) revert InvalidAmount();\n        \n        Company storage company = companies[msg.sender];\n        if (!company.isActive) revert CompanyNotActive();\n        if (company.balance < amount) revert InsufficientBalance();\n\n        company.balance -= amount;\n        USDE.safeTransfer(msg.sender, amount);\n        \n        emit FundsWithdrawn(msg.sender, amount, block.timestamp);\n    }\n\n    // Automation functions\n    function processPaymentBatch(address[] calldata contributors) \n        external \n        override \n        onlyRole(_AUTOMATION_ROLE) \n        nonReentrant \n        whenNotPaused \n        returns (uint256)\n    {\n        if (msg.sender != address(automationContract)) revert UnauthorizedAccess();\n        \n        uint256 processedCount = 0;\n\n        for (uint256 i = 0; i < contributors.length; i++) {\n            address contributor = contributors[i];\n            address companyAddr = contributorToCompany[contributor];\n            \n            if (!isPaymentDue(companyAddr, contributor)) continue;\n            if (!canProcessPayment(companyAddr)) continue;\n\n            try this.processSalary(contributor) {\n                processedCount++;\n            } catch {\n                emit IntegrationError(\"Payment failed\", \"\");\n                continue;\n            }\n        }\n\n        return processedCount;\n    }\n\n    // View functions\n    function getCompanyDetails(address company) external view override returns (\n        string memory name,\n        uint256 balance,\n        uint256 contributorCount,\n        bool isActive,\n        address admin\n    ) {\n        Company storage comp = companies[company];\n        return (\n            comp.name,\n            comp.balance,\n            comp.contributorCount,\n            comp.isActive,\n            comp.admin\n        );\n    }\n\n    function getContributorDetails(\n        address company,\n        address contributor\n    ) external view override returns (\n        string memory name,\n        uint256 salary,\n        uint256 nextPayment,\n        uint256 paymentFrequency,\n        bool isActive,\n        uint256 lastProcessedTime\n    ) {\n        Contributor storage cont = companies[company].contributors[contributor];\n        return (\n            cont.name,\n            cont.salary,\n            cont.nextPayment,\n            cont.paymentFrequency,\n            cont.isActive,\n            cont.lastProcessedTime\n        );\n    }\n\n    // Helper functions\n    function isPaymentDue(address company, address contributor) \n        public \n        view \n        override \n        returns (bool) \n    {\n        Company storage comp = companies[company];\n        if (!comp.isActive) return false;\n\n        Contributor storage cont = comp.contributors[contributor];\n        return cont.isActive && block.timestamp >= cont.nextPayment;\n    }\n\n    function canProcessPayment(address company) \n        public \n        view \n        override \n        returns (bool) \n    {\n        Company storage comp = companies[company];\n        if (!comp.isActive || paused()) return false;\n\n        uint256 totalPayroll = getTotalPayroll(company);\n        return comp.balance >= totalPayroll;\n    }\n\n    function getActiveCompanies() \n        external \n        view \n        override \n        returns (address[] memory) \n    {\n        uint256 count = 0;\n        for (uint256 i = 0; i < companyAddresses.length; i++) {\n            if (companies[companyAddresses[i]].isActive) {\n                count++;\n            }\n        }\n\n        address[] memory activeCompanies = new address[](count);\n        uint256 index = 0;\n        \n        for (uint256 i = 0; i < companyAddresses.length; i++) {\n            if (companies[companyAddresses[i]].isActive) {\n                activeCompanies[index] = companyAddresses[i];\n                index++;\n            }\n        }\n\n        return activeCompanies;\n    }\n\n    function getActiveContributors(address company) \n        external \n        view \n        override \n        returns (address[] memory) \n    {\n        Company storage comp = companies[company];\n        if (!comp.isActive) revert CompanyNotActive();\n\n        uint256 count = 0;\n        for (uint256 i = 0; i < comp.contributorAddresses.length; i++) {\n            if (comp.contributors[comp.contributorAddresses[i]].isActive) {\n                count++;\n            }\n        }\n\n        address[] memory activeContributors = new address[](count);\n        uint256 index = 0;\n\n        for (uint256 i = 0; i < comp.contributorAddresses.length; i++) {\n            address contributor = comp.contributorAddresses[i];\n            if (comp.contributors[contributor].isActive) {\n                activeContributors[index] = contributor;\n                index++;\n            }\n        }\n\n        return activeContributors;\n    }\n\n    function getTotalPayroll(address company) \n        public \n        view \n        override \n        returns (uint256) \n    {\n        Company storage comp = companies[company];\n        if (!comp.isActive) return 0;\n\n        uint256 total = 0;\n        for (uint256 i = 0; i < comp.contributorAddresses.length; i++) {\n            address contributor = comp.contributorAddresses[i];\n            if (comp.contributors[contributor].isActive) {\n                total += comp.contributors[contributor].salary;\n            }\n        }\n\n        return total;\n    }\n\n    // Emergency functions\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n\n    function setStakingContract(address _stakingContract) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (_stakingContract == address(0)) revert InvalidAddress();\n        if (_stakingContract.code.length == 0) revert InvalidAddress();\n        stakingContract = IPaythenaStaking(_stakingContract);\n    }\n\n    function setLoanContract(address _loanContract) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (_loanContract == address(0)) revert InvalidAddress();\n        if (_loanContract.code.length == 0) revert InvalidAddress();\n        loanContract = IPaythenaLoan(_loanContract);\n    }\n\n    // Integration view functions\n    function getStakingInfo(address account) \n        external \n        view \n        returns (\n            uint256 stakedAmount,\n            uint256 pendingRewards,\n            uint256 currentRate\n        ) \n    {\n        try stakingContract.getStakedAmount(account) returns (uint256 staked) {\n            try stakingContract.getPendingRewards(account) returns (uint256 pending) {\n                try stakingContract.rewardRate() returns (uint256 rate) {\n                    return (staked, pending, rate);\n                } catch {\n                    return (staked, pending, 0);\n                }\n            } catch {\n                return (staked, 0, 0);\n            }\n        } catch {\n            return (0, 0, 0);\n        }\n    }\n\n    function getLoanInfo(address borrower) \n        external \n        view \n        returns (\n            uint256 loanBalance,\n            uint256 creditScore,\n            LoanStatus status\n        ) \n    {\n        try loanContract.getLoanDetails(borrower) returns (\n            uint256,  // amount\n            uint256,  // totalDue\n            uint256,  // monthlyPayment\n            uint256,  // remainingAmount\n            uint256,  // nextPaymentDue\n            LoanStatus loanStatus\n        ) {\n            try loanContract.getLoanBalance(borrower) returns (uint256 balance) {\n                try loanContract.getCreditScore(borrower) returns (uint256 score) {\n                    return (balance, score, loanStatus);\n                } catch {\n                    return (balance, 0, loanStatus);\n                }\n            } catch {\n                return (0, 0, loanStatus);\n            }\n        } catch {\n            return (0, 0, LoanStatus.None);\n        }\n    }\n\n    function getAutomationInfo() \n        external \n        view \n        returns (\n            uint256 interval,\n            uint256 batchSize,\n            uint256 lastProcessed,\n            bool isActive\n        ) \n    {\n        if (address(automationContract) == address(0)) {\n            return (0, 0, 0, false);\n        }\n\n        try automationContract.PROCESSING_INTERVAL() returns (uint256 _interval) {\n            try automationContract.MAX_BATCH_SIZE() returns (uint256 _batchSize) {\n                try automationContract.lastProcessedTime() returns (uint256 _lastProcessed) {\n                    return (_interval, _batchSize, _lastProcessed, !paused());\n                } catch {\n                    return (_interval, _batchSize, 0, !paused());\n                }\n            } catch {\n                return (_interval, 0, 0, !paused());\n            }\n        } catch {\n            return (0, 0, 0, !paused());\n        }\n    }\n\n    // Add helper function to check integration status\n    function checkIntegrationStatus() \n        external \n        view \n        returns (\n            bool stakingActive,\n            bool loanActive,\n            bool automationActive\n        ) \n    {\n        stakingActive = address(stakingContract) != address(0) && \n                       !stakingContract.paused();\n        \n        loanActive = address(loanContract) != address(0) && \n                    !loanContract.paused();\n        \n        automationActive = address(automationContract) != address(0) && \n                          !automationContract.paused();\n    }\n}"
    },
    "contracts/PaythenaLoan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./interfaces/IPaythenaCore.sol\";\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\n\n/**\n * @title PaythenaLoan\n * @notice Manages salary-backed loans for contributors\n * @custom:security-contact security@paythena.com\n */\ncontract PaythenaLoan is ReentrancyGuard, AccessControl, Pausable {\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    // Roles\n    bytes32 public constant LOAN_MANAGER_ROLE = keccak256(\"LOAN_MANAGER_ROLE\");\n    \n    // State variables\n    IERC20 public constant USDE = IERC20(0x426E7d03f9803Dd11cb8616C65b99a3c0AfeA6dE);\n    IPaythenaCore public immutable coreContract;\n\n    // Constants with explicit visibility\n    uint256 public constant MIN_LOAN_DURATION = 30 days;\n    uint256 public constant MAX_LOAN_DURATION = 365 days;\n    uint256 public constant MAX_LOAN_TO_SALARY_RATIO = 300; // 300% of monthly salary\n    uint256 public constant INTEREST_RATE_BASE = 10000; // 100.00%\n    uint256 public constant DEFAULT_INTEREST_RATE = 500; // 5.00%\n    uint256 public constant LATE_PAYMENT_PENALTY = 100; // 1.00%\n    uint256 public constant GRACE_PERIOD = 3 days;\n\n    // Updated structs with better organization\n    struct Loan {\n        uint256 amount;\n        uint256 totalDue;\n        uint256 monthlyPayment;\n        uint256 startDate;\n        uint256 dueDate;\n        uint256 lastPaymentDate;\n        uint256 remainingAmount;\n        uint256 interestRate;\n        LoanStatus status;\n        bytes32 purposeHash;\n    }\n\n    struct LoanApplication {\n        uint256 requestedAmount;\n        uint256 duration;\n        string purpose;\n        uint256 timestamp;\n        LoanStatus status;\n    }\n\n    enum LoanStatus {\n        None,\n        Pending,\n        Approved,\n        Active,\n        Completed,\n        Defaulted,\n        Rejected\n    }\n\n    // Mappings with explicit visibility\n    mapping(address => Loan) public loans;\n    mapping(address => LoanApplication) public loanApplications;\n    mapping(address => uint256) public totalLoansIssued;\n    mapping(address => uint256) public creditScore;\n\n    // Events\n    event LoanRequested(\n        address indexed borrower,\n        uint256 amount,\n        uint256 duration,\n        string purpose,\n        uint256 timestamp\n    );\n    \n    event LoanApproved(\n        address indexed borrower,\n        uint256 amount,\n        uint256 duration,\n        uint256 interestRate\n    );\n    \n    event LoanCompleted(\n        address indexed borrower,\n        uint256 totalPaid\n    );\n    \n    event PaymentMade(\n        address indexed borrower,\n        uint256 amount,\n        uint256 remainingBalance\n    );\n    \n    event LoanDefaulted(\n        address indexed borrower,\n        uint256 remainingAmount\n    );\n    \n    event CreditScoreUpdated(\n        address indexed borrower,\n        uint256 newScore\n    );\n\n    struct RepaymentSchedule {\n        uint256 amount;\n        uint256 frequency;\n        uint256 nextPaymentDate;\n        uint256 remainingPayments;\n        bool isActive;\n    }\n\n    mapping(address => RepaymentSchedule) public repaymentSchedules;\n\n    event RepaymentScheduleCreated(\n        address indexed borrower,\n        uint256 amount,\n        uint256 frequency,\n        uint256 totalPayments\n    );\n\n    event AutomatedRepaymentProcessed(\n        address indexed borrower,\n        uint256 amount,\n        uint256 remainingBalance,\n        uint256 timestamp\n    );\n\n    /**\n     * @notice Contract constructor\n     * @param _core Address of PaythenaCore contract\n     */\n    constructor(\n        address _core\n    ) {\n        require(_core != address(0), \"Invalid core address\");\n        \n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(LOAN_MANAGER_ROLE, msg.sender);\n        \n        coreContract = IPaythenaCore(_core);\n    }\n\n    /**\n     * @notice Request a loan\n     * @param amount Requested loan amount\n     * @param duration Loan duration in seconds\n     * @param purpose Purpose of the loan\n     */\n    function requestLoan(\n        uint256 amount,\n        uint256 duration,\n        string calldata purpose\n    ) \n        external \n        nonReentrant \n        whenNotPaused \n    {\n        checkRole(msg.sender);\n        require(amount > 0, \"Invalid amount\");\n        require(duration <= MAX_LOAN_DURATION, \"Duration too long\");\n        require(bytes(purpose).length > 0, \"Purpose required\");\n        require(loans[msg.sender].status == LoanStatus.None, \"Active loan exists\");\n\n        emit LoanRequested(\n            msg.sender,\n            amount,\n            duration,\n            purpose,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @notice Approve a loan application\n     * @param borrower Address of the borrower\n     * @param customInterestRate Optional custom interest rate\n     */\n    function approveLoan(address borrower, uint256 customInterestRate) \n        external \n        nonReentrant \n        whenNotPaused \n    {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Not admin\");\n        require(loanApplications[borrower].status == LoanStatus.Pending, \"Not pending\");\n\n        LoanApplication storage application = loanApplications[borrower];\n        uint256 interestRate = customInterestRate > 0 ? customInterestRate : DEFAULT_INTEREST_RATE;\n        \n        uint256 totalAmount = _calculateTotalAmount(\n            application.requestedAmount,\n            interestRate,\n            application.duration\n        );\n        \n        uint256 monthlyPayment = totalAmount / (application.duration / 30 days);\n\n        loans[borrower] = Loan({\n            amount: application.requestedAmount,\n            totalDue: totalAmount,\n            monthlyPayment: monthlyPayment,\n            startDate: block.timestamp,\n            dueDate: block.timestamp + application.duration,\n            lastPaymentDate: block.timestamp,\n            remainingAmount: totalAmount,\n            interestRate: interestRate,\n            status: LoanStatus.Active,\n            purposeHash: keccak256(bytes(application.purpose))\n        });\n\n        // Transfer loan amount\n        USDE.safeTransfer(borrower, application.requestedAmount);\n        \n        totalLoansIssued[borrower] += application.requestedAmount;\n        delete loanApplications[borrower];\n\n        emit LoanApproved(\n            borrower,\n            application.requestedAmount,\n            block.timestamp + application.duration,\n            interestRate\n        );\n    }\n\n    /**\n     * @notice Make a loan payment\n     * @param amount Payment amount\n     */\n    function makePayment(uint256 amount) \n        external \n        nonReentrant \n        whenNotPaused \n    {\n        Loan storage loan = loans[msg.sender];\n        require(loan.status == LoanStatus.Active, \"No active loan\");\n        require(amount > 0, \"Zero amount\");\n\n        // Calculate late payment penalties\n        uint256 totalDue = loan.remainingAmount;\n        if (block.timestamp > loan.lastPaymentDate + 30 days + GRACE_PERIOD) {\n            uint256 penalty = (totalDue * LATE_PAYMENT_PENALTY) / INTEREST_RATE_BASE;\n            totalDue += penalty;\n        }\n\n        require(amount <= totalDue, \"Amount exceeds due\");\n\n        // Transfer payment\n        USDE.safeTransferFrom(msg.sender, address(this), amount);\n        \n        loan.remainingAmount -= amount;\n        loan.lastPaymentDate = block.timestamp;\n\n        if (loan.remainingAmount == 0) {\n            loan.status = LoanStatus.Completed;\n            _updateCreditScore(msg.sender, true);\n            emit LoanCompleted(msg.sender, loan.totalDue);\n        } else {\n            emit PaymentMade(msg.sender, amount, loan.remainingAmount);\n        }\n    }\n\n    /**\n     * @notice Check for and mark defaulted loans\n     * @param borrower Address of the borrower\n     */\n    function checkLoanDefault(address borrower) \n        external \n        nonReentrant \n    {\n        Loan storage loan = loans[borrower];\n        require(loan.status == LoanStatus.Active, \"Not active loan\");\n\n        if (block.timestamp > loan.dueDate + GRACE_PERIOD) {\n            loan.status = LoanStatus.Defaulted;\n            _updateCreditScore(borrower, false);\n            emit LoanDefaulted(borrower, loan.remainingAmount);\n        }\n    }\n\n    /**\n     * @notice Calculate total amount including interest\n     * @param principal Principal amount\n     * @param interestRate Annual interest rate\n     * @param duration Loan duration\n     */\n    function _calculateTotalAmount(\n        uint256 principal,\n        uint256 interestRate,\n        uint256 duration\n    ) \n        internal \n        pure \n        returns (uint256) \n    {\n        uint256 interest = (principal * interestRate * duration) / (INTEREST_RATE_BASE * 365 days);\n        return principal + interest;\n    }\n\n    /**\n     * @notice Update borrower's credit score\n     * @param borrower Address of the borrower\n     * @param positive Whether the update is positive or negative\n     */\n    function _updateCreditScore(address borrower, bool positive) \n        internal \n    {\n        uint256 currentScore = creditScore[borrower];\n        if (positive) {\n            creditScore[borrower] = currentScore < 950 ? currentScore + 50 : 1000;\n        } else {\n            creditScore[borrower] = currentScore > 100 ? currentScore - 100 : 0;\n        }\n        emit CreditScoreUpdated(borrower, creditScore[borrower]);\n    }\n\n    /**\n     * @notice Get loan details\n     * @param borrower Address of the borrower\n     */\n    function getLoanDetails(address borrower)\n        external\n        view\n        returns (\n            uint256 amount,\n            uint256 totalDue,\n            uint256 monthlyPayment,\n            uint256 remainingAmount,\n            uint256 nextPaymentDue,\n            LoanStatus status\n        )\n    {\n        Loan storage loan = loans[borrower];\n        return (\n            loan.amount,\n            loan.totalDue,\n            loan.monthlyPayment,\n            loan.remainingAmount,\n            loan.lastPaymentDate + 30 days,\n            loan.status\n        );\n    }\n\n    /**\n     * @notice Emergency pause\n     * @dev Only callable by admin\n     */\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @notice Emergency unpause\n     * @dev Only callable by admin\n     */\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n\n    /**\n     * @notice Set up automated repayment schedule\n     * @param frequency Repayment frequency in seconds\n     * @param startDate Start date for repayments\n     */\n    function setupAutomatedRepayment(\n        uint256 frequency,\n        uint256 startDate\n    ) \n        external \n        nonReentrant \n        whenNotPaused \n    {\n        Loan storage loan = loans[msg.sender];\n        require(loan.status == LoanStatus.Active, \"No active loan\");\n        require(frequency >= 1 days, \"Frequency too short\");\n        require(startDate > block.timestamp, \"Invalid start date\");\n\n        uint256 monthlyPayment = _calculateMonthlyPayment(\n            loan.remainingAmount,\n            loan.interestRate,\n            loan.dueDate\n        );\n\n        repaymentSchedules[msg.sender] = RepaymentSchedule({\n            amount: monthlyPayment,\n            frequency: frequency,\n            nextPaymentDate: startDate,\n            remainingPayments: loan.remainingAmount / monthlyPayment,\n            isActive: true\n        });\n\n        emit RepaymentScheduleCreated(\n            msg.sender,\n            monthlyPayment,\n            frequency,\n            loan.remainingAmount / monthlyPayment\n        );\n    }\n\n    /**\n     * @notice Process automated repayment\n     * @param borrower Address of the borrower\n     */\n    function processAutomatedRepayment(address borrower) \n        external \n        nonReentrant \n        whenNotPaused \n        returns (bool)\n    {\n        RepaymentSchedule storage schedule = repaymentSchedules[borrower];\n        require(schedule.isActive, \"No active schedule\");\n        require(block.timestamp >= schedule.nextPaymentDate, \"Payment not due\");\n\n        Loan storage loan = loans[borrower];\n        require(loan.status == LoanStatus.Active, \"Loan not active\");\n\n        // Process payment\n        bool success = _processRepayment(borrower, schedule.amount);\n        if (success) {\n            schedule.nextPaymentDate += schedule.frequency;\n            schedule.remainingPayments--;\n\n            if (loan.remainingAmount == 0) {\n                schedule.isActive = false;\n            }\n\n            emit AutomatedRepaymentProcessed(\n                borrower,\n                schedule.amount,\n                loan.remainingAmount,\n                block.timestamp\n            );\n        }\n\n        return success;\n    }\n\n    /**\n     * @notice Check if repayment is needed\n     * @param borrower Address of the borrower\n     */\n    function checkRepaymentNeeded(address borrower) \n        external \n        view \n        returns (bool needed, uint256 amount) \n    {\n        RepaymentSchedule storage schedule = repaymentSchedules[borrower];\n        if (!schedule.isActive) return (false, 0);\n        if (block.timestamp < schedule.nextPaymentDate) return (false, 0);\n\n        return (true, schedule.amount);\n    }\n\n    /**\n     * @notice Cancel automated repayment schedule\n     */\n    function cancelAutomatedRepayment() \n        external \n        nonReentrant \n    {\n        RepaymentSchedule storage schedule = repaymentSchedules[msg.sender];\n        require(schedule.isActive, \"No active schedule\");\n        \n        schedule.isActive = false;\n    }\n\n    /**\n     * @notice Get repayment schedule details\n     * @param borrower Address of the borrower\n     */\n    function getRepaymentSchedule(address borrower)\n        external\n        view\n        returns (\n            uint256 amount,\n            uint256 frequency,\n            uint256 nextPaymentDate,\n            uint256 remainingPayments,\n            bool isActive\n        )\n    {\n        RepaymentSchedule storage schedule = repaymentSchedules[borrower];\n        return (\n            schedule.amount,\n            schedule.frequency,\n            schedule.nextPaymentDate,\n            schedule.remainingPayments,\n            schedule.isActive\n        );\n    }\n\n    /**\n     * @notice Calculate monthly payment for a loan\n     * @param principal Loan amount\n     * @param interestRate Annual interest rate\n     * @param dueDate Loan due date\n     */\n    function _calculateMonthlyPayment(\n        uint256 principal,\n        uint256 interestRate,\n        uint256 dueDate\n    ) \n        internal \n        view \n        returns (uint256) \n    {\n        uint256 duration = dueDate - block.timestamp;\n        uint256 months = duration / 30 days;\n        if (months == 0) return principal;\n        \n        uint256 monthlyInterest = (principal * interestRate) / \n            (INTEREST_RATE_BASE * 12);\n        \n        return (principal / months) + monthlyInterest;\n    }\n\n    /**\n     * @notice Process a loan repayment\n     * @param borrower Address of the borrower\n     * @param amount Amount to repay\n     */\n    function _processRepayment(\n        address borrower,\n        uint256 amount\n    ) \n        internal \n        returns (bool) \n    {\n        Loan storage loan = loans[borrower];\n        require(loan.status == LoanStatus.Active, \"Loan not active\");\n        require(amount > 0, \"Invalid amount\");\n\n        // Transfer payment\n        try USDE.transferFrom(borrower, address(this), amount) {\n            loan.remainingAmount = loan.remainingAmount > amount ? \n                loan.remainingAmount - amount : 0;\n            \n            if (loan.remainingAmount == 0) {\n                loan.status = LoanStatus.Completed;\n                emit LoanCompleted(borrower, loan.totalDue);\n            } else {\n                emit PaymentMade(borrower, amount, loan.remainingAmount);\n            }\n            \n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * @notice Check if an account is a contributor\n     * @param account Address of the account\n     */\n    function _isContributor(address account) internal view returns (bool) {\n        bytes32 contributorRole = coreContract.CONTRIBUTOR_ROLE();\n        return coreContract.hasRole(contributorRole, account);\n    }\n\n    function checkRole(address account) internal view {\n        bytes32 contributorRole = coreContract.CONTRIBUTOR_ROLE();\n        require(\n            coreContract.hasRole(contributorRole, account),\n            \"Not a contributor\"\n        );\n    }\n}"
    },
    "contracts/PaythenaStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./interfaces/IPaythenaCore.sol\";\n\n/**\n * @title PaythenaStaking\n * @notice Handles staking of USDe tokens and reward distribution\n * @dev Implements ReentrancyGuard, AccessControl, and Pausable for security\n */\ncontract PaythenaStaking is ReentrancyGuard, AccessControl, Pausable {\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    // Constants\n    bytes32 public constant STAKING_MANAGER_ROLE = keccak256(\"STAKING_MANAGER_ROLE\");\n    uint256 public constant MIN_STAKE_AMOUNT = 100 * 1e18; // 100 USDe minimum\n    uint256 public constant MAX_STAKE_AMOUNT = 1000000 * 1e18; // 1M USDe maximum\n    uint256 public constant REWARD_RATE_DENOMINATOR = 10000;\n    uint256 public constant MAX_REWARD_RATE = 2000; // 20% maximum annual rate\n    \n    // USDe contracts on Ble Testnet\n    IERC20 public constant USDE = IERC20(0x426E7d03f9803Dd11cb8616C65b99a3c0AfeA6dE);\n    IERC20 public constant SUSDE = IERC20(0x80f9Ec4bA5746d8214b3A9a73cc4390AB0F0E633);\n    \n    // Immutable state variables\n    address public immutable core;\n\n    // Staking state\n    mapping(address => uint256) public stakedBalance;\n    mapping(address => uint256) public rewardBalance;\n    mapping(address => uint256) public lastUpdateTime;\n    uint256 public totalStaked;\n    uint256 public rewardRate = 500; // 5% annual rate (base 10000)\n\n    // Events\n    event Staked(address indexed user, uint256 amount, uint256 timestamp);\n    event Unstaked(address indexed user, uint256 amount, uint256 timestamp);\n    event RewardsClaimed(address indexed user, uint256 amount, uint256 timestamp);\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate, uint256 timestamp);\n    event EmergencyWithdraw(address indexed user, uint256 amount, uint256 timestamp);\n\n    /**\n     * @notice Contract constructor\n     * @param _core The core contract address\n     */\n    constructor(address _core) {\n        require(_core != address(0), \"Invalid core address\");\n        \n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(STAKING_MANAGER_ROLE, msg.sender);\n        \n        core = _core;\n    }\n\n    /**\n     * @notice Stake USDe tokens\n     * @param amount Amount to stake\n     */\n    function stake(uint256 amount) external nonReentrant whenNotPaused {\n        require(amount >= MIN_STAKE_AMOUNT, \"Amount below minimum\");\n        require(amount <= MAX_STAKE_AMOUNT, \"Amount above maximum\");\n        require(totalStaked + amount <= MAX_STAKE_AMOUNT * 1000, \"Pool capacity exceeded\");\n        \n        // Update rewards before modifying stakes\n        _updateRewards(msg.sender);\n        \n        // Transfer tokens from user\n        USDE.safeTransferFrom(msg.sender, address(this), amount);\n        \n        // Update balances\n        stakedBalance[msg.sender] += amount;\n        totalStaked += amount;\n        \n        emit Staked(msg.sender, amount, block.timestamp);\n    }\n\n    /**\n     * @notice Unstake USDe tokens\n     * @param amount Amount to unstake\n     */\n    function unstake(uint256 amount) external nonReentrant whenNotPaused {\n        require(amount > 0, \"Amount must be > 0\");\n        require(stakedBalance[msg.sender] >= amount, \"Insufficient balance\");\n        \n        // Update rewards before modifying stakes\n        _updateRewards(msg.sender);\n        \n        // Update balances\n        stakedBalance[msg.sender] -= amount;\n        totalStaked -= amount;\n        \n        // Transfer tokens back to user\n        USDE.safeTransfer(msg.sender, amount);\n        \n        emit Unstaked(msg.sender, amount, block.timestamp);\n    }\n\n    /**\n     * @notice Claim accumulated rewards\n     */\n    function claimRewards() external nonReentrant whenNotPaused {\n        _updateRewards(msg.sender);\n        uint256 rewards = rewardBalance[msg.sender];\n        require(rewards > 0, \"No rewards available\");\n        \n        rewardBalance[msg.sender] = 0;\n        USDE.safeTransfer(msg.sender, rewards);\n        \n        emit RewardsClaimed(msg.sender, rewards, block.timestamp);\n    }\n\n    /**\n     * @notice Emergency withdraw in case of contract issues\n     */\n    function emergencyWithdraw() external nonReentrant {\n        uint256 amount = stakedBalance[msg.sender];\n        require(amount > 0, \"No stake to withdraw\");\n        \n        stakedBalance[msg.sender] = 0;\n        totalStaked -= amount;\n        \n        USDE.safeTransfer(msg.sender, amount);\n        \n        emit EmergencyWithdraw(msg.sender, amount, block.timestamp);\n    }\n\n    /**\n     * @notice Update reward rate\n     * @param newRate New reward rate (base 10000)\n     */\n    function updateRewardRate(uint256 newRate) external onlyRole(STAKING_MANAGER_ROLE) {\n        require(newRate <= MAX_REWARD_RATE, \"Rate too high\");\n        uint256 oldRate = rewardRate;\n        rewardRate = newRate;\n        emit RewardRateUpdated(oldRate, newRate, block.timestamp);\n    }\n\n    /**\n     * @notice Update rewards for an account\n     * @param account Address to update rewards for\n     */\n    function _updateRewards(address account) private {\n        uint256 timeElapsed = block.timestamp - lastUpdateTime[account];\n        if (timeElapsed > 0 && stakedBalance[account] > 0) {\n            uint256 rewards = (stakedBalance[account] * rewardRate * timeElapsed) / (REWARD_RATE_DENOMINATOR * 365 days);\n            rewardBalance[account] += rewards;\n            lastUpdateTime[account] = block.timestamp;\n        }\n    }\n\n    // View functions\n    function getStakedAmount(address account) external view returns (uint256) {\n        return stakedBalance[account];\n    }\n\n    function getRewards(address account) external view returns (uint256) {\n        return rewardBalance[account];\n    }\n\n    function getPendingRewards(address account) external view returns (uint256) {\n        uint256 timeElapsed = block.timestamp - lastUpdateTime[account];\n        if (timeElapsed == 0 || stakedBalance[account] == 0) {\n            return rewardBalance[account];\n        }\n        return rewardBalance[account] + (stakedBalance[account] * rewardRate * timeElapsed) / (REWARD_RATE_DENOMINATOR * 365 days);\n    }\n\n    // Admin functions\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}