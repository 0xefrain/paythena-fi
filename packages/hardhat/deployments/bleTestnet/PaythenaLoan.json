{
  "address": "0x165eD3639C955CC79485ee580659860CdEAC9155",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AutomatedRepaymentProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newScore",
          "type": "uint256"
        }
      ],
      "name": "CreditScoreUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        }
      ],
      "name": "LoanApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPaid",
          "type": "uint256"
        }
      ],
      "name": "LoanCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "name": "LoanDefaulted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "purpose",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LoanRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingBalance",
          "type": "uint256"
        }
      ],
      "name": "PaymentMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "frequency",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPayments",
          "type": "uint256"
        }
      ],
      "name": "RepaymentScheduleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_INTEREST_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GRACE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LATE_PAYMENT_PENALTY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LOAN_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LOAN_TO_SALARY_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LOAN_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDE",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "customInterestRate",
          "type": "uint256"
        }
      ],
      "name": "approveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelAutomatedRepayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "checkLoanDefault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "checkRepaymentNeeded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "needed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coreContract",
      "outputs": [
        {
          "internalType": "contract IPaythenaCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creditScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "getLoanDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "monthlyPayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextPaymentDue",
          "type": "uint256"
        },
        {
          "internalType": "enum PaythenaLoan.LoanStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "getRepaymentSchedule",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "frequency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextPaymentDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingPayments",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loanApplications",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "purpose",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum PaythenaLoan.LoanStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "monthlyPayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dueDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPaymentDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "enum PaythenaLoan.LoanStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "purposeHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "makePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "processAutomatedRepayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "repaymentSchedules",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "frequency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextPaymentDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingPayments",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "purpose",
          "type": "string"
        }
      ],
      "name": "requestLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "frequency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        }
      ],
      "name": "setupAutomatedRepayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalLoansIssued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc0714fa605e6ec47c7a2c9b2692ebd2094c65dee915e4e23e7efa601a368129",
  "receipt": {
    "to": null,
    "from": "0x7012FB31F1223A70D5dd78A58Fe7DdD2f28F7E85",
    "contractAddress": "0x165eD3639C955CC79485ee580659860CdEAC9155",
    "transactionIndex": 1,
    "gasUsed": "2112010",
    "logsBloom": "0x
    "blockHash": "0x3d3211a9992eed8bdda1c4184ea0cf7ab914b0f15951a04b5ad4769d988f8173",
    "transactionHash": "0xfc0714fa605e6ec47c7a2c9b2692ebd2094c65dee915e4e23e7efa601a368129",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 2796387,
        "transactionHash": "0xfc0714fa605e6ec47c7a2c9b2692ebd2094c65dee915e4e23e7efa601a368129",
        "address": "0x165eD3639C955CC79485ee580659860CdEAC9155",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007012fb31f1223a70d5dd78a58fe7ddd2f28f7e85",
          "0x0000000000000000000000007012fb31f1223a70d5dd78a58fe7ddd2f28f7e85"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3d3211a9992eed8bdda1c4184ea0cf7ab914b0f15951a04b5ad4769d988f8173"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 2796387,
        "transactionHash": "0xfc0714fa605e6ec47c7a2c9b2692ebd2094c65dee915e4e23e7efa601a368129",
        "address": "0x165eD3639C955CC79485ee580659860CdEAC9155",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa03a3445a42c88c4c71fab3b69391367d1386136663ed015f42f4322182d4547",
          "0x0000000000000000000000007012fb31f1223a70d5dd78a58fe7ddd2f28f7e85",
          "0x0000000000000000000000007012fb31f1223a70d5dd78a58fe7ddd2f28f7e85"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x3d3211a9992eed8bdda1c4184ea0cf7ab914b0f15951a04b5ad4769d988f8173"
      }
    ],
    "blockNumber": 2796387,
    "cumulativeGasUsed": "2155828",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7012FB31F1223A70D5dd78A58Fe7DdD2f28F7E85"
  ],
  "numDeployments": 1,
  "solcInputHash": "dd7f43f006d7b5e17cd30b2a51833282",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AutomatedRepaymentProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"}],\"name\":\"CreditScoreUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"LoanApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"}],\"name\":\"LoanCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"LoanDefaulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LoanRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"}],\"name\":\"PaymentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPayments\",\"type\":\"uint256\"}],\"name\":\"RepaymentScheduleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_INTEREST_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LATE_PAYMENT_PENALTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOAN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOAN_TO_SALARY_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LOAN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customInterestRate\",\"type\":\"uint256\"}],\"name\":\"approveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelAutomatedRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"checkLoanDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"checkRepaymentNeeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"needed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreContract\",\"outputs\":[{\"internalType\":\"contract IPaythenaCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getLoanDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPaymentDue\",\"type\":\"uint256\"},{\"internalType\":\"enum PaythenaLoan.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getRepaymentSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingPayments\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanApplications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum PaythenaLoan.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"enum PaythenaLoan.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"purposeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"makePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"processAutomatedRepayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"repaymentSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingPayments\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"}],\"name\":\"requestLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"name\":\"setupAutomatedRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLoansIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"security@paythena.com\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approveLoan(address,uint256)\":{\"params\":{\"borrower\":\"Address of the borrower\",\"customInterestRate\":\"Optional custom interest rate\"}},\"checkLoanDefault(address)\":{\"params\":{\"borrower\":\"Address of the borrower\"}},\"checkRepaymentNeeded(address)\":{\"params\":{\"borrower\":\"Address of the borrower\"}},\"constructor\":{\"params\":{\"_core\":\"Address of PaythenaCore contract\"}},\"getLoanDetails(address)\":{\"params\":{\"borrower\":\"Address of the borrower\"}},\"getRepaymentSchedule(address)\":{\"params\":{\"borrower\":\"Address of the borrower\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"makePayment(uint256)\":{\"params\":{\"amount\":\"Payment amount\"}},\"pause()\":{\"details\":\"Only callable by admin\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"processAutomatedRepayment(address)\":{\"params\":{\"borrower\":\"Address of the borrower\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"requestLoan(uint256,uint256,string)\":{\"params\":{\"amount\":\"Requested loan amount\",\"duration\":\"Loan duration in seconds\",\"purpose\":\"Purpose of the loan\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setupAutomatedRepayment(uint256,uint256)\":{\"params\":{\"frequency\":\"Repayment frequency in seconds\",\"startDate\":\"Start date for repayments\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Only callable by admin\"}},\"title\":\"PaythenaLoan\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveLoan(address,uint256)\":{\"notice\":\"Approve a loan application\"},\"cancelAutomatedRepayment()\":{\"notice\":\"Cancel automated repayment schedule\"},\"checkLoanDefault(address)\":{\"notice\":\"Check for and mark defaulted loans\"},\"checkRepaymentNeeded(address)\":{\"notice\":\"Check if repayment is needed\"},\"constructor\":{\"notice\":\"Contract constructor\"},\"getLoanDetails(address)\":{\"notice\":\"Get loan details\"},\"getRepaymentSchedule(address)\":{\"notice\":\"Get repayment schedule details\"},\"makePayment(uint256)\":{\"notice\":\"Make a loan payment\"},\"pause()\":{\"notice\":\"Emergency pause\"},\"processAutomatedRepayment(address)\":{\"notice\":\"Process automated repayment\"},\"requestLoan(uint256,uint256,string)\":{\"notice\":\"Request a loan\"},\"setupAutomatedRepayment(uint256,uint256)\":{\"notice\":\"Set up automated repayment schedule\"},\"unpause()\":{\"notice\":\"Emergency unpause\"}},\"notice\":\"Manages salary-backed loans for contributors\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaythenaLoan.sol\":\"PaythenaLoan\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/PaythenaLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IPaythenaCore.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title PaythenaLoan\\n * @notice Manages salary-backed loans for contributors\\n * @custom:security-contact security@paythena.com\\n */\\ncontract PaythenaLoan is ReentrancyGuard, AccessControl, Pausable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // Roles\\n    bytes32 public constant LOAN_MANAGER_ROLE = keccak256(\\\"LOAN_MANAGER_ROLE\\\");\\n    \\n    // State variables\\n    IERC20 public constant USDE = IERC20(0x426E7d03f9803Dd11cb8616C65b99a3c0AfeA6dE);\\n    IPaythenaCore public immutable coreContract;\\n\\n    // Constants with explicit visibility\\n    uint256 public constant MIN_LOAN_DURATION = 30 days;\\n    uint256 public constant MAX_LOAN_DURATION = 365 days;\\n    uint256 public constant MAX_LOAN_TO_SALARY_RATIO = 300; // 300% of monthly salary\\n    uint256 public constant INTEREST_RATE_BASE = 10000; // 100.00%\\n    uint256 public constant DEFAULT_INTEREST_RATE = 500; // 5.00%\\n    uint256 public constant LATE_PAYMENT_PENALTY = 100; // 1.00%\\n    uint256 public constant GRACE_PERIOD = 3 days;\\n\\n    // Updated structs with better organization\\n    struct Loan {\\n        uint256 amount;\\n        uint256 totalDue;\\n        uint256 monthlyPayment;\\n        uint256 startDate;\\n        uint256 dueDate;\\n        uint256 lastPaymentDate;\\n        uint256 remainingAmount;\\n        uint256 interestRate;\\n        LoanStatus status;\\n        bytes32 purposeHash;\\n    }\\n\\n    struct LoanApplication {\\n        uint256 requestedAmount;\\n        uint256 duration;\\n        string purpose;\\n        uint256 timestamp;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        None,\\n        Pending,\\n        Approved,\\n        Active,\\n        Completed,\\n        Defaulted,\\n        Rejected\\n    }\\n\\n    // Mappings with explicit visibility\\n    mapping(address => Loan) public loans;\\n    mapping(address => LoanApplication) public loanApplications;\\n    mapping(address => uint256) public totalLoansIssued;\\n    mapping(address => uint256) public creditScore;\\n\\n    // Events\\n    event LoanRequested(\\n        address indexed borrower,\\n        uint256 amount,\\n        uint256 duration,\\n        string purpose,\\n        uint256 timestamp\\n    );\\n    \\n    event LoanApproved(\\n        address indexed borrower,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 interestRate\\n    );\\n    \\n    event LoanCompleted(\\n        address indexed borrower,\\n        uint256 totalPaid\\n    );\\n    \\n    event PaymentMade(\\n        address indexed borrower,\\n        uint256 amount,\\n        uint256 remainingBalance\\n    );\\n    \\n    event LoanDefaulted(\\n        address indexed borrower,\\n        uint256 remainingAmount\\n    );\\n    \\n    event CreditScoreUpdated(\\n        address indexed borrower,\\n        uint256 newScore\\n    );\\n\\n    struct RepaymentSchedule {\\n        uint256 amount;\\n        uint256 frequency;\\n        uint256 nextPaymentDate;\\n        uint256 remainingPayments;\\n        bool isActive;\\n    }\\n\\n    mapping(address => RepaymentSchedule) public repaymentSchedules;\\n\\n    event RepaymentScheduleCreated(\\n        address indexed borrower,\\n        uint256 amount,\\n        uint256 frequency,\\n        uint256 totalPayments\\n    );\\n\\n    event AutomatedRepaymentProcessed(\\n        address indexed borrower,\\n        uint256 amount,\\n        uint256 remainingBalance,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Contract constructor\\n     * @param _core Address of PaythenaCore contract\\n     */\\n    constructor(\\n        address _core\\n    ) {\\n        require(_core != address(0), \\\"Invalid core address\\\");\\n        \\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(LOAN_MANAGER_ROLE, msg.sender);\\n        \\n        coreContract = IPaythenaCore(_core);\\n    }\\n\\n    /**\\n     * @notice Request a loan\\n     * @param amount Requested loan amount\\n     * @param duration Loan duration in seconds\\n     * @param purpose Purpose of the loan\\n     */\\n    function requestLoan(\\n        uint256 amount,\\n        uint256 duration,\\n        string calldata purpose\\n    ) \\n        external \\n        nonReentrant \\n        whenNotPaused \\n    {\\n        checkRole(msg.sender);\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(duration <= MAX_LOAN_DURATION, \\\"Duration too long\\\");\\n        require(bytes(purpose).length > 0, \\\"Purpose required\\\");\\n        require(loans[msg.sender].status == LoanStatus.None, \\\"Active loan exists\\\");\\n\\n        emit LoanRequested(\\n            msg.sender,\\n            amount,\\n            duration,\\n            purpose,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Approve a loan application\\n     * @param borrower Address of the borrower\\n     * @param customInterestRate Optional custom interest rate\\n     */\\n    function approveLoan(address borrower, uint256 customInterestRate) \\n        external \\n        nonReentrant \\n        whenNotPaused \\n    {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Not admin\\\");\\n        require(loanApplications[borrower].status == LoanStatus.Pending, \\\"Not pending\\\");\\n\\n        LoanApplication storage application = loanApplications[borrower];\\n        uint256 interestRate = customInterestRate > 0 ? customInterestRate : DEFAULT_INTEREST_RATE;\\n        \\n        uint256 totalAmount = _calculateTotalAmount(\\n            application.requestedAmount,\\n            interestRate,\\n            application.duration\\n        );\\n        \\n        uint256 monthlyPayment = totalAmount / (application.duration / 30 days);\\n\\n        loans[borrower] = Loan({\\n            amount: application.requestedAmount,\\n            totalDue: totalAmount,\\n            monthlyPayment: monthlyPayment,\\n            startDate: block.timestamp,\\n            dueDate: block.timestamp + application.duration,\\n            lastPaymentDate: block.timestamp,\\n            remainingAmount: totalAmount,\\n            interestRate: interestRate,\\n            status: LoanStatus.Active,\\n            purposeHash: keccak256(bytes(application.purpose))\\n        });\\n\\n        // Transfer loan amount\\n        USDE.safeTransfer(borrower, application.requestedAmount);\\n        \\n        totalLoansIssued[borrower] += application.requestedAmount;\\n        delete loanApplications[borrower];\\n\\n        emit LoanApproved(\\n            borrower,\\n            application.requestedAmount,\\n            block.timestamp + application.duration,\\n            interestRate\\n        );\\n    }\\n\\n    /**\\n     * @notice Make a loan payment\\n     * @param amount Payment amount\\n     */\\n    function makePayment(uint256 amount) \\n        external \\n        nonReentrant \\n        whenNotPaused \\n    {\\n        Loan storage loan = loans[msg.sender];\\n        require(loan.status == LoanStatus.Active, \\\"No active loan\\\");\\n        require(amount > 0, \\\"Zero amount\\\");\\n\\n        // Calculate late payment penalties\\n        uint256 totalDue = loan.remainingAmount;\\n        if (block.timestamp > loan.lastPaymentDate + 30 days + GRACE_PERIOD) {\\n            uint256 penalty = (totalDue * LATE_PAYMENT_PENALTY) / INTEREST_RATE_BASE;\\n            totalDue += penalty;\\n        }\\n\\n        require(amount <= totalDue, \\\"Amount exceeds due\\\");\\n\\n        // Transfer payment\\n        USDE.safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        loan.remainingAmount -= amount;\\n        loan.lastPaymentDate = block.timestamp;\\n\\n        if (loan.remainingAmount == 0) {\\n            loan.status = LoanStatus.Completed;\\n            _updateCreditScore(msg.sender, true);\\n            emit LoanCompleted(msg.sender, loan.totalDue);\\n        } else {\\n            emit PaymentMade(msg.sender, amount, loan.remainingAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check for and mark defaulted loans\\n     * @param borrower Address of the borrower\\n     */\\n    function checkLoanDefault(address borrower) \\n        external \\n        nonReentrant \\n    {\\n        Loan storage loan = loans[borrower];\\n        require(loan.status == LoanStatus.Active, \\\"Not active loan\\\");\\n\\n        if (block.timestamp > loan.dueDate + GRACE_PERIOD) {\\n            loan.status = LoanStatus.Defaulted;\\n            _updateCreditScore(borrower, false);\\n            emit LoanDefaulted(borrower, loan.remainingAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate total amount including interest\\n     * @param principal Principal amount\\n     * @param interestRate Annual interest rate\\n     * @param duration Loan duration\\n     */\\n    function _calculateTotalAmount(\\n        uint256 principal,\\n        uint256 interestRate,\\n        uint256 duration\\n    ) \\n        internal \\n        pure \\n        returns (uint256) \\n    {\\n        uint256 interest = (principal * interestRate * duration) / (INTEREST_RATE_BASE * 365 days);\\n        return principal + interest;\\n    }\\n\\n    /**\\n     * @notice Update borrower's credit score\\n     * @param borrower Address of the borrower\\n     * @param positive Whether the update is positive or negative\\n     */\\n    function _updateCreditScore(address borrower, bool positive) \\n        internal \\n    {\\n        uint256 currentScore = creditScore[borrower];\\n        if (positive) {\\n            creditScore[borrower] = currentScore < 950 ? currentScore + 50 : 1000;\\n        } else {\\n            creditScore[borrower] = currentScore > 100 ? currentScore - 100 : 0;\\n        }\\n        emit CreditScoreUpdated(borrower, creditScore[borrower]);\\n    }\\n\\n    /**\\n     * @notice Get loan details\\n     * @param borrower Address of the borrower\\n     */\\n    function getLoanDetails(address borrower)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 totalDue,\\n            uint256 monthlyPayment,\\n            uint256 remainingAmount,\\n            uint256 nextPaymentDue,\\n            LoanStatus status\\n        )\\n    {\\n        Loan storage loan = loans[borrower];\\n        return (\\n            loan.amount,\\n            loan.totalDue,\\n            loan.monthlyPayment,\\n            loan.remainingAmount,\\n            loan.lastPaymentDate + 30 days,\\n            loan.status\\n        );\\n    }\\n\\n    /**\\n     * @notice Emergency pause\\n     * @dev Only callable by admin\\n     */\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Emergency unpause\\n     * @dev Only callable by admin\\n     */\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Set up automated repayment schedule\\n     * @param frequency Repayment frequency in seconds\\n     * @param startDate Start date for repayments\\n     */\\n    function setupAutomatedRepayment(\\n        uint256 frequency,\\n        uint256 startDate\\n    ) \\n        external \\n        nonReentrant \\n        whenNotPaused \\n    {\\n        Loan storage loan = loans[msg.sender];\\n        require(loan.status == LoanStatus.Active, \\\"No active loan\\\");\\n        require(frequency >= 1 days, \\\"Frequency too short\\\");\\n        require(startDate > block.timestamp, \\\"Invalid start date\\\");\\n\\n        uint256 monthlyPayment = _calculateMonthlyPayment(\\n            loan.remainingAmount,\\n            loan.interestRate,\\n            loan.dueDate\\n        );\\n\\n        repaymentSchedules[msg.sender] = RepaymentSchedule({\\n            amount: monthlyPayment,\\n            frequency: frequency,\\n            nextPaymentDate: startDate,\\n            remainingPayments: loan.remainingAmount / monthlyPayment,\\n            isActive: true\\n        });\\n\\n        emit RepaymentScheduleCreated(\\n            msg.sender,\\n            monthlyPayment,\\n            frequency,\\n            loan.remainingAmount / monthlyPayment\\n        );\\n    }\\n\\n    /**\\n     * @notice Process automated repayment\\n     * @param borrower Address of the borrower\\n     */\\n    function processAutomatedRepayment(address borrower) \\n        external \\n        nonReentrant \\n        whenNotPaused \\n        returns (bool)\\n    {\\n        RepaymentSchedule storage schedule = repaymentSchedules[borrower];\\n        require(schedule.isActive, \\\"No active schedule\\\");\\n        require(block.timestamp >= schedule.nextPaymentDate, \\\"Payment not due\\\");\\n\\n        Loan storage loan = loans[borrower];\\n        require(loan.status == LoanStatus.Active, \\\"Loan not active\\\");\\n\\n        // Process payment\\n        bool success = _processRepayment(borrower, schedule.amount);\\n        if (success) {\\n            schedule.nextPaymentDate += schedule.frequency;\\n            schedule.remainingPayments--;\\n\\n            if (loan.remainingAmount == 0) {\\n                schedule.isActive = false;\\n            }\\n\\n            emit AutomatedRepaymentProcessed(\\n                borrower,\\n                schedule.amount,\\n                loan.remainingAmount,\\n                block.timestamp\\n            );\\n        }\\n\\n        return success;\\n    }\\n\\n    /**\\n     * @notice Check if repayment is needed\\n     * @param borrower Address of the borrower\\n     */\\n    function checkRepaymentNeeded(address borrower) \\n        external \\n        view \\n        returns (bool needed, uint256 amount) \\n    {\\n        RepaymentSchedule storage schedule = repaymentSchedules[borrower];\\n        if (!schedule.isActive) return (false, 0);\\n        if (block.timestamp < schedule.nextPaymentDate) return (false, 0);\\n\\n        return (true, schedule.amount);\\n    }\\n\\n    /**\\n     * @notice Cancel automated repayment schedule\\n     */\\n    function cancelAutomatedRepayment() \\n        external \\n        nonReentrant \\n    {\\n        RepaymentSchedule storage schedule = repaymentSchedules[msg.sender];\\n        require(schedule.isActive, \\\"No active schedule\\\");\\n        \\n        schedule.isActive = false;\\n    }\\n\\n    /**\\n     * @notice Get repayment schedule details\\n     * @param borrower Address of the borrower\\n     */\\n    function getRepaymentSchedule(address borrower)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 frequency,\\n            uint256 nextPaymentDate,\\n            uint256 remainingPayments,\\n            bool isActive\\n        )\\n    {\\n        RepaymentSchedule storage schedule = repaymentSchedules[borrower];\\n        return (\\n            schedule.amount,\\n            schedule.frequency,\\n            schedule.nextPaymentDate,\\n            schedule.remainingPayments,\\n            schedule.isActive\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate monthly payment for a loan\\n     * @param principal Loan amount\\n     * @param interestRate Annual interest rate\\n     * @param dueDate Loan due date\\n     */\\n    function _calculateMonthlyPayment(\\n        uint256 principal,\\n        uint256 interestRate,\\n        uint256 dueDate\\n    ) \\n        internal \\n        view \\n        returns (uint256) \\n    {\\n        uint256 duration = dueDate - block.timestamp;\\n        uint256 months = duration / 30 days;\\n        if (months == 0) return principal;\\n        \\n        uint256 monthlyInterest = (principal * interestRate) / \\n            (INTEREST_RATE_BASE * 12);\\n        \\n        return (principal / months) + monthlyInterest;\\n    }\\n\\n    /**\\n     * @notice Process a loan repayment\\n     * @param borrower Address of the borrower\\n     * @param amount Amount to repay\\n     */\\n    function _processRepayment(\\n        address borrower,\\n        uint256 amount\\n    ) \\n        internal \\n        returns (bool) \\n    {\\n        Loan storage loan = loans[borrower];\\n        require(loan.status == LoanStatus.Active, \\\"Loan not active\\\");\\n        require(amount > 0, \\\"Invalid amount\\\");\\n\\n        // Transfer payment\\n        try USDE.transferFrom(borrower, address(this), amount) {\\n            loan.remainingAmount = loan.remainingAmount > amount ? \\n                loan.remainingAmount - amount : 0;\\n            \\n            if (loan.remainingAmount == 0) {\\n                loan.status = LoanStatus.Completed;\\n                emit LoanCompleted(borrower, loan.totalDue);\\n            } else {\\n                emit PaymentMade(borrower, amount, loan.remainingAmount);\\n            }\\n            \\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if an account is a contributor\\n     * @param account Address of the account\\n     */\\n    function _isContributor(address account) internal view returns (bool) {\\n        bytes32 contributorRole = coreContract.CONTRIBUTOR_ROLE();\\n        return coreContract.hasRole(contributorRole, account);\\n    }\\n\\n    function checkRole(address account) internal view {\\n        bytes32 contributorRole = coreContract.CONTRIBUTOR_ROLE();\\n        require(\\n            coreContract.hasRole(contributorRole, account),\\n            \\\"Not a contributor\\\"\\n        );\\n    }\\n}\",\"keccak256\":\"0x7bbd22c64524eaafeea6b52a1477d05e52a0a404f1bd68b17e29ff9880008194\",\"license\":\"MIT\"},\"contracts/interfaces/IPaythenaCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IPaythenaCore {\\n    // Structs\\n    struct Contributor {\\n        string name;\\n        uint256 salary;\\n        uint256 lastPayment;\\n        uint256 nextPayment;\\n        uint256 paymentFrequency;\\n        uint256 lastProcessedTime;\\n        bool isActive;\\n    }\\n\\n    struct Company {\\n        string name;\\n        uint256 balance;\\n        uint256 contributorCount;\\n        bool isActive;\\n        address admin;\\n        mapping(address => Contributor) contributors;\\n        address[] contributorAddresses;\\n    }\\n\\n    // Role functions\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    // Role constants\\n    function COMPANY_ROLE() external view returns (bytes32);\\n    function CONTRIBUTOR_ROLE() external view returns (bytes32);\\n    function AUTOMATION_ROLE() external view returns (bytes32);\\n    function INTEGRATION_ROLE() external view returns (bytes32);\\n\\n    // Integration functions\\n    function setAutomationContract(address _automationContract) external;\\n    function getStakedAmount(address account) external view returns (uint256);\\n    function getLoanBalance(address account) external view returns (uint256);\\n    function processPaymentBatch(address[] calldata contributors) external returns (uint256);\\n\\n    // Events\\n    event CompanyRegistered(address indexed company, string name, uint256 timestamp);\\n    event ContributorAdded(address indexed company, address indexed contributor, string name, uint256 salary, uint256 timestamp);\\n    event ContributorRemoved(address indexed company, address indexed contributor, uint256 timestamp);\\n    event SalaryProcessed(address indexed company, address indexed contributor, uint256 amount, uint256 timestamp);\\n    event FundsDeposited(address indexed company, uint256 amount, uint256 timestamp);\\n    event FundsWithdrawn(address indexed company, uint256 amount, uint256 timestamp);\\n    event PaymentProcessed(uint256 indexed paymentId, address indexed company, address indexed contributor, uint256 amount, bytes32 txHash, uint256 timestamp);\\n    event AutomationContractUpdated(address indexed oldContract, address indexed newContract);\\n    event IntegrationError(string reason, bytes data);\\n\\n    // Core functions\\n    function registerCompany(string calldata name) external;\\n    function addContributor(address contributor, string calldata name, uint256 salary, uint256 paymentFrequency) external;\\n    function removeContributor(address contributor) external;\\n    function processSalary(address contributor) external;\\n    function deposit(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n\\n    // View functions\\n    function getCompanyDetails(address company) external view returns (\\n        string memory name,\\n        uint256 balance,\\n        uint256 contributorCount,\\n        bool isActive,\\n        address admin\\n    );\\n\\n    function getContributorDetails(address company, address contributor) external view returns (\\n        string memory name,\\n        uint256 salary,\\n        uint256 nextPayment,\\n        uint256 paymentFrequency,\\n        bool isActive,\\n        uint256 lastProcessedTime\\n    );\\n\\n    function isPaymentDue(address company, address contributor) external view returns (bool);\\n    function canProcessPayment(address company) external view returns (bool);\\n    function getActiveCompanies() external view returns (address[] memory);\\n    function getActiveContributors(address company) external view returns (address[] memory);\\n    function getTotalPayroll(address company) external view returns (uint256);\\n}\",\"keccak256\":\"0xaad3a12adbe6cf187db0db95057eff083e2265f8e0714d9686a374ef767e3e63\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620025a7380380620025a7833981016040819052620000349162000182565b60016000556002805460ff191690556001600160a01b0381166200009e5760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420636f72652061646472657373000000000000000000000000604482015260640160405180910390fd5b620000ab600033620000eb565b50620000d87fa03a3445a42c88c4c71fab3b69391367d1386136663ed015f42f4322182d454733620000eb565b506001600160a01b0316608052620001b4565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff16620001785760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016200017c565b5060005b92915050565b6000602082840312156200019557600080fd5b81516001600160a01b0381168114620001ad57600080fd5b9392505050565b6080516123c9620001de6000396000818161059b01528181611b860152611c2f01526123c96000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806383baea6311610125578063b045d068116100ad578063d547741f1161007c578063d547741f1461057a578063dbabe5f01461058d578063e80db5db14610596578063e8a7da8e146105bd578063f7e590ee146105e257600080fd5b8063b045d06814610537578063b8ad1c1e1461054a578063c1a287e21461055d578063d3602dc61461056757600080fd5b806391d14854116100f457806391d14854146104d25780639f63f5c3146104e5578063a217fddf146104f8578063a367a3e614610500578063a429ac461461051357600080fd5b806383baea63146104985780638456cb59146104a057806389d99a05146104a85780638f07de56146104b257600080fd5b80633f4ba83a116101a85780635b9634d2116101775780635b9634d2146103a05780635c975abb146103a85780637065ac93146103b357806373b4086b146103dd5780637d01b1651461045857600080fd5b80633f4ba83a1461032b57806342de081b146103335780635114cb5214610366578063525b9fde1461037957600080fd5b80632900ca25116101e45780632900ca25146102845780632f2ff15d146102fa578063316f86391461030f57806336568abe1461031857600080fd5b806301ffc9a7146102165780630d0b2ca61461023e57806314738c8614610257578063248a9ca314610260575b600080fd5b610229610224366004611ef0565b610602565b60405190151581526020015b60405180910390f35b6102496301e1338081565b604051908152602001610235565b61024961012c81565b61024961026e366004611f1a565b6000908152600160208190526040909120015490565b6102d0610292366004611f4a565b6001600160a01b031660009081526007602052604090208054600182015460028301546003840154600490940154929491939092909160ff90911690565b6040805195865260208601949094529284019190915260608301521515608082015260a001610235565b61030d610308366004611f65565b610639565b005b6102496101f481565b61030d610326366004611f65565b610665565b61030d61069d565b61034e73426e7d03f9803dd11cb8616c65b99a3c0afea6de81565b6040516001600160a01b039091168152602001610235565b61030d610374366004611f1a565b6106b3565b6102497fa03a3445a42c88c4c71fab3b69391367d1386136663ed015f42f4322182d454781565b61030d610903565b60025460ff16610229565b6103c66103c1366004611f4a565b61097a565b604080519215158352602083019190915201610235565b6104426103eb366004611f4a565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501546006860154600787015460088801546009909801549698959795969495939492939192909160ff16908a565b6040516102359a99989796959493929190611fc9565b6102d0610466366004611f4a565b600760205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b610249606481565b61030d6109d1565b61024962278d0081565b6102496104c0366004611f4a565b60056020526000908152604090205481565b6102296104e0366004611f65565b6109e4565b61030d6104f3366004612023565b610a0f565b610249600081565b61022961050e366004611f4a565b610d5d565b610526610521366004611f4a565b610f56565b604051610235959493929190612071565b61030d610545366004611f4a565b611011565b61030d6105583660046120be565b611114565b6102496203f48081565b61030d6105753660046120e0565b61131b565b61030d610588366004611f65565b6114b9565b61024961271081565b61034e7f000000000000000000000000000000000000000000000000000000000000000081565b6105d06105cb366004611f4a565b6114df565b60405161023596959493929190612160565b6102496105f0366004611f4a565b60066020526000908152604090205481565b60006001600160e01b03198216637965db0b60e01b148061063357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152600160208190526040909120015461065581611556565b61065f8383611560565b50505050565b6001600160a01b038116331461068e5760405163334bd91960e11b815260040160405180910390fd5b61069882826115d9565b505050565b60006106a881611556565b6106b0611646565b50565b6106bb611698565b6106c36116c2565b33600090815260036020819052604090912090600882015460ff1660068111156106ef576106ef611f91565b146107325760405162461bcd60e51b815260206004820152600e60248201526d27379030b1ba34bb32903637b0b760911b60448201526064015b60405180910390fd5b600082116107705760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610729565b600681015460058201546203f4809061078c9062278d006121a6565b61079691906121a6565b4211156107c75760006127106107ad6064846121b9565b6107b791906121d0565b90506107c381836121a6565b9150505b8083111561080c5760405162461bcd60e51b8152602060048201526012602482015271416d6f756e7420657863656564732064756560701b6044820152606401610729565b61082c73426e7d03f9803dd11cb8616c65b99a3c0afea6de3330866116e6565b8282600601600082825461084091906121f2565b909155505042600583015560068201546000036108b05760088201805460ff1916600417905561087133600161174d565b600182015460405190815233907fd7806bc9facb41d6b807f6861bcab0ca3309b7aea9a1ab1fce129c3fed68977a9060200160405180910390a26108f7565b600682015460405133917fc65a4e529c0450a515882508bea7ee3485fbfdf8436e0bd13dc38dfbc859b1cb916108ee91878252602082015260400190565b60405180910390a25b50506106b06001600055565b61090b611698565b336000908152600760205260409020600481015460ff166109635760405162461bcd60e51b81526020600482015260126024820152714e6f20616374697665207363686564756c6560701b6044820152606401610729565b600401805460ff191690556109786001600055565b565b6001600160a01b0381166000908152600760205260408120600481015482919060ff166109ad5750600093849350915050565b80600201544210156109c55750600093849350915050565b54600194909350915050565b60006109dc81611556565b6106b061182c565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610a17611698565b610a1f6116c2565b610a2a6000336109e4565b610a625760405162461bcd60e51b81526020600482015260096024820152682737ba1030b236b4b760b91b6044820152606401610729565b60016001600160a01b0383166000908152600460208190526040909120015460ff166006811115610a9557610a95611f91565b14610ad05760405162461bcd60e51b815260206004820152600b60248201526a4e6f742070656e64696e6760a81b6044820152606401610729565b6001600160a01b03821660009081526004602052604081209082610af6576101f4610af8565b825b90506000610b0f8360000154838560010154611869565b9050600062278d008460010154610b2691906121d0565b610b3090836121d0565b905060405180610140016040528085600001548152602001838152602001828152602001428152602001856001015442610b6a91906121a6565b815242602082015260408101849052606081018590526080016003815260200185600201604051610b9b919061223f565b604051809103902081525060036000886001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff02191690836006811115610c4657610c46611f91565b021790555061012091909101516009909101558354610c7c9073426e7d03f9803dd11cb8616c65b99a3c0afea6de9088906118b2565b83546001600160a01b03871660009081526005602052604081208054909190610ca69084906121a6565b90915550506001600160a01b03861660009081526004602052604081208181556001810182905590610cdb6002830182611ea2565b5060006003820155600401805460ff19169055835460018501546001600160a01b038816917f3a2fb17990ba9fc92930b56cf93fe97981f8dfdf0f3ff6c90652866495a3b45c91610d2c90426121a6565b604080519283526020830191909152810186905260600160405180910390a250505050610d596001600055565b5050565b6000610d67611698565b610d6f6116c2565b6001600160a01b0382166000908152600760205260409020600481015460ff16610dd05760405162461bcd60e51b81526020600482015260126024820152714e6f20616374697665207363686564756c6560701b6044820152606401610729565b8060020154421015610e165760405162461bcd60e51b815260206004820152600f60248201526e5061796d656e74206e6f742064756560881b6044820152606401610729565b6001600160a01b038316600090815260036020819052604090912090600882015460ff166006811115610e4b57610e4b611f91565b14610e8a5760405162461bcd60e51b815260206004820152600f60248201526e4c6f616e206e6f742061637469766560881b6044820152606401610729565b6000610e9a8584600001546118e3565b90508015610f43578260010154836002016000828254610eba91906121a6565b9091555050600383018054906000610ed1836122de565b91905055508160060154600003610eef5760048301805460ff191690555b8254600683015460408051928352602083019190915242908201526001600160a01b038616907fc8e1a896eb0dca654576ee6ad666cbbb98d986bd52de045b045017a4d77a59639060600160405180910390a25b92505050610f516001600055565b919050565b60046020526000908152604090208054600182015460028301805492939192610f7e90612205565b80601f0160208091040260200160405190810160405280929190818152602001828054610faa90612205565b8015610ff75780601f10610fcc57610100808354040283529160200191610ff7565b820191906000526020600020905b815481529060010190602001808311610fda57829003601f168201915b50505050600383015460049093015491929160ff16905085565b611019611698565b6001600160a01b038116600090815260036020819052604090912090600882015460ff16600681111561104e5761104e611f91565b1461108d5760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030b1ba34bb32903637b0b760891b6044820152606401610729565b6203f48081600401546110a091906121a6565b4211156111095760088101805460ff191660051790556110c182600061174d565b816001600160a01b03167f0be253503c49f8fb02046da3ef57bc2f5f881eb14ba5c2c26b54bf2fb4e7db07826006015460405161110091815260200190565b60405180910390a25b506106b06001600055565b61111c611698565b6111246116c2565b33600090815260036020819052604090912090600882015460ff16600681111561115057611150611f91565b1461118e5760405162461bcd60e51b815260206004820152600e60248201526d27379030b1ba34bb32903637b0b760911b6044820152606401610729565b620151808310156111d75760405162461bcd60e51b8152602060048201526013602482015272119c995c5d595b98de481d1bdbc81cda1bdc9d606a1b6044820152606401610729565b42821161121b5760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964207374617274206461746560701b6044820152606401610729565b6000611234826006015483600701548460040154611b0b565b90506040518060a0016040528082815260200185815260200184815260200182846006015461126391906121d0565b81526001602091820181905233600081815260078452604090819020855181559385015192840192909255908301516002830155606083015160038301556080909201516004909101805460ff191691151591909117905560068301547f5ec36003c8c684eea9bc687c1ed0e127051b919dd8216cc20503468ba6368d9690839087906112f19083906121d0565b6040805193845260208401929092529082015260600160405180910390a25050610d596001600055565b611323611698565b61132b6116c2565b61133433611b82565b600084116113755760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610729565b6301e133808311156113bd5760405162461bcd60e51b81526020600482015260116024820152704475726174696f6e20746f6f206c6f6e6760781b6044820152606401610729565b806113fd5760405162461bcd60e51b815260206004820152601060248201526f141d5c9c1bdcd9481c995c5d5a5c995960821b6044820152606401610729565b3360009081526003602052604081206008015460ff16600681111561142457611424611f91565b146114665760405162461bcd60e51b8152602060048201526012602482015271416374697665206c6f616e2065786973747360701b6044820152606401610729565b336001600160a01b03167f2bdc8f5f9cb762a233a74819626fc55c0b067184bf5078a5a08d2b392f94f01585858585426040516114a79594939291906122f5565b60405180910390a261065f6001600055565b600082815260016020819052604090912001546114d581611556565b61065f83836115d9565b600080600080600080600060036000896001600160a01b03166001600160a01b0316815260200190815260200160002090508060000154816001015482600201548360060154846005015462278d0061153891906121a6565b60089590950154939c929b50909950975091955060ff169350915050565b6106b08133611cdc565b600061156c83836109e4565b6115d15760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a4506001610633565b506000610633565b60006115e583836109e4565b156115d15760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610633565b61164e611d15565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6002600054036116bb57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60025460ff16156109785760405163d93c066560e01b815260040160405180910390fd5b6040516001600160a01b03848116602483015283811660448301526064820183905261065f9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611d38565b6001600160a01b03821660009081526006602052604090205481156117a6576103b6811061177d576103e8611788565b6117888160326121a6565b6001600160a01b0384166000908152600660205260409020556117da565b606481116117b55760006117c0565b6117c06064826121f2565b6001600160a01b0384166000908152600660205260409020555b6001600160a01b0383166000818152600660209081526040918290205491519182527f79c012a0cfae660e09134956bc432c8497ec80e86a3a108d130e8b3fca52b3ad910160405180910390a2505050565b6118346116c2565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861167b3390565b60008061187c6127106301e133806121b9565b8361188786886121b9565b61189191906121b9565b61189b91906121d0565b90506118a781866121a6565b9150505b9392505050565b6040516001600160a01b0383811660248301526044820183905261069891859182169063a9059cbb9060640161171b565b6001600160a01b0382166000908152600360208190526040822090600882015460ff16600681111561191757611917611f91565b146119565760405162461bcd60e51b815260206004820152600f60248201526e4c6f616e206e6f742061637469766560881b6044820152606401610729565b600083116119975760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610729565b6040516323b872dd60e01b81526001600160a01b03851660048201523060248201526044810184905273426e7d03f9803dd11cb8616c65b99a3c0afea6de906323b872dd906064016020604051808303816000875af1925050508015611a1a575060408051601f3d908101601f19168201909252611a179181019061233c565b60015b611a28576000915050610633565b5082816006015411611a3b576000611a4b565b828160060154611a4b91906121f2565b60068201819055600003611ab05760088101805460ff1916600417905560018101546040519081526001600160a01b038516907fd7806bc9facb41d6b807f6861bcab0ca3309b7aea9a1ab1fce129c3fed68977a9060200160405180910390a2611b01565b836001600160a01b03167fc65a4e529c0450a515882508bea7ee3485fbfdf8436e0bd13dc38dfbc859b1cb848360060154604051611af8929190918252602082015260400190565b60405180910390a25b6001915050610633565b600080611b1842846121f2565b90506000611b2962278d00836121d0565b905080600003611b3d5785925050506118ab565b6000611b4c612710600c6121b9565b611b5687896121b9565b611b6091906121d0565b905080611b6d83896121d0565b611b7791906121a6565b979650505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eafb79e26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c06919061235e565b604051632474521560e21b8152600481018290526001600160a01b0384811660248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906391d1485490604401602060405180830381865afa158015611c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9c919061233c565b610d595760405162461bcd60e51b81526020600482015260116024820152702737ba10309031b7b73a3934b13aba37b960791b6044820152606401610729565b611ce682826109e4565b610d595760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610729565b60025460ff1661097857604051638dfc202b60e01b815260040160405180910390fd5b6000611d4d6001600160a01b03841683611d9b565b90508051600014158015611d72575080806020019051810190611d70919061233c565b155b1561069857604051635274afe760e01b81526001600160a01b0384166004820152602401610729565b60606118ab8383600084600080856001600160a01b03168486604051611dc19190612377565b60006040518083038185875af1925050503d8060008114611dfe576040519150601f19603f3d011682016040523d82523d6000602084013e611e03565b606091505b5091509150611e13868383611e1d565b9695505050505050565b606082611e3257611e2d82611e79565b6118ab565b8151158015611e4957506001600160a01b0384163b155b15611e7257604051639996b31560e01b81526001600160a01b0385166004820152602401610729565b50806118ab565b805115611e895780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b508054611eae90612205565b6000825580601f10611ebe575050565b601f0160209004906000526020600020908101906106b091905b80821115611eec5760008155600101611ed8565b5090565b600060208284031215611f0257600080fd5b81356001600160e01b0319811681146118ab57600080fd5b600060208284031215611f2c57600080fd5b5035919050565b80356001600160a01b0381168114610f5157600080fd5b600060208284031215611f5c57600080fd5b6118ab82611f33565b60008060408385031215611f7857600080fd5b82359150611f8860208401611f33565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60078110611fc557634e487b7160e01b600052602160045260246000fd5b9052565b6000610140820190508b82528a60208301528960408301528860608301528760808301528660a08301528560c08301528460e083015261200d610100830185611fa7565b826101208301529b9a5050505050505050505050565b6000806040838503121561203657600080fd5b61203f83611f33565b946020939093013593505050565b60005b83811015612068578181015183820152602001612050565b50506000910152565b85815284602082015260a06040820152600084518060a084015261209c8160c085016020890161204d565b60608301859052601f01601f1916820160c0019050611e136080830184611fa7565b600080604083850312156120d157600080fd5b50508035926020909101359150565b600080600080606085870312156120f657600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561211c57600080fd5b818701915087601f83011261213057600080fd5b81358181111561213f57600080fd5b88602082850101111561215157600080fd5b95989497505060200194505050565b600060c082019050878252866020830152856040830152846060830152836080830152611b7760a0830184611fa7565b634e487b7160e01b600052601160045260246000fd5b8082018082111561063357610633612190565b808202811582820484141761063357610633612190565b6000826121ed57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561063357610633612190565b600181811c9082168061221957607f821691505b60208210810361223957634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061225b57607f831692505b6020808410820361227a57634e487b7160e01b86526022600452602486fd5b81801561228e57600181146122a3576122d0565b60ff19861689528415158502890196506122d0565b60008a81526020902060005b868110156122c85781548b8201529085019083016122af565b505084890196505b509498975050505050505050565b6000816122ed576122ed612190565b506000190190565b85815284602082015260806040820152826080820152828460a0830137600060a08483010152600060a0601f19601f86011683010190508260608301529695505050505050565b60006020828403121561234e57600080fd5b815180151581146118ab57600080fd5b60006020828403121561237057600080fd5b5051919050565b6000825161238981846020870161204d565b919091019291505056fea2646970667358221220bccac376f830663329e3dab09062621dd5c34fbfc2bc396c2b2c5d36256e57d564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c806383baea6311610125578063b045d068116100ad578063d547741f1161007c578063d547741f1461057a578063dbabe5f01461058d578063e80db5db14610596578063e8a7da8e146105bd578063f7e590ee146105e257600080fd5b8063b045d06814610537578063b8ad1c1e1461054a578063c1a287e21461055d578063d3602dc61461056757600080fd5b806391d14854116100f457806391d14854146104d25780639f63f5c3146104e5578063a217fddf146104f8578063a367a3e614610500578063a429ac461461051357600080fd5b806383baea63146104985780638456cb59146104a057806389d99a05146104a85780638f07de56146104b257600080fd5b80633f4ba83a116101a85780635b9634d2116101775780635b9634d2146103a05780635c975abb146103a85780637065ac93146103b357806373b4086b146103dd5780637d01b1651461045857600080fd5b80633f4ba83a1461032b57806342de081b146103335780635114cb5214610366578063525b9fde1461037957600080fd5b80632900ca25116101e45780632900ca25146102845780632f2ff15d146102fa578063316f86391461030f57806336568abe1461031857600080fd5b806301ffc9a7146102165780630d0b2ca61461023e57806314738c8614610257578063248a9ca314610260575b600080fd5b610229610224366004611ef0565b610602565b60405190151581526020015b60405180910390f35b6102496301e1338081565b604051908152602001610235565b61024961012c81565b61024961026e366004611f1a565b6000908152600160208190526040909120015490565b6102d0610292366004611f4a565b6001600160a01b031660009081526007602052604090208054600182015460028301546003840154600490940154929491939092909160ff90911690565b6040805195865260208601949094529284019190915260608301521515608082015260a001610235565b61030d610308366004611f65565b610639565b005b6102496101f481565b61030d610326366004611f65565b610665565b61030d61069d565b61034e73426e7d03f9803dd11cb8616c65b99a3c0afea6de81565b6040516001600160a01b039091168152602001610235565b61030d610374366004611f1a565b6106b3565b6102497fa03a3445a42c88c4c71fab3b69391367d1386136663ed015f42f4322182d454781565b61030d610903565b60025460ff16610229565b6103c66103c1366004611f4a565b61097a565b604080519215158352602083019190915201610235565b6104426103eb366004611f4a565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501546006860154600787015460088801546009909801549698959795969495939492939192909160ff16908a565b6040516102359a99989796959493929190611fc9565b6102d0610466366004611f4a565b600760205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b610249606481565b61030d6109d1565b61024962278d0081565b6102496104c0366004611f4a565b60056020526000908152604090205481565b6102296104e0366004611f65565b6109e4565b61030d6104f3366004612023565b610a0f565b610249600081565b61022961050e366004611f4a565b610d5d565b610526610521366004611f4a565b610f56565b604051610235959493929190612071565b61030d610545366004611f4a565b611011565b61030d6105583660046120be565b611114565b6102496203f48081565b61030d6105753660046120e0565b61131b565b61030d610588366004611f65565b6114b9565b61024961271081565b61034e7f000000000000000000000000000000000000000000000000000000000000000081565b6105d06105cb366004611f4a565b6114df565b60405161023596959493929190612160565b6102496105f0366004611f4a565b60066020526000908152604090205481565b60006001600160e01b03198216637965db0b60e01b148061063357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152600160208190526040909120015461065581611556565b61065f8383611560565b50505050565b6001600160a01b038116331461068e5760405163334bd91960e11b815260040160405180910390fd5b61069882826115d9565b505050565b60006106a881611556565b6106b0611646565b50565b6106bb611698565b6106c36116c2565b33600090815260036020819052604090912090600882015460ff1660068111156106ef576106ef611f91565b146107325760405162461bcd60e51b815260206004820152600e60248201526d27379030b1ba34bb32903637b0b760911b60448201526064015b60405180910390fd5b600082116107705760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610729565b600681015460058201546203f4809061078c9062278d006121a6565b61079691906121a6565b4211156107c75760006127106107ad6064846121b9565b6107b791906121d0565b90506107c381836121a6565b9150505b8083111561080c5760405162461bcd60e51b8152602060048201526012602482015271416d6f756e7420657863656564732064756560701b6044820152606401610729565b61082c73426e7d03f9803dd11cb8616c65b99a3c0afea6de3330866116e6565b8282600601600082825461084091906121f2565b909155505042600583015560068201546000036108b05760088201805460ff1916600417905561087133600161174d565b600182015460405190815233907fd7806bc9facb41d6b807f6861bcab0ca3309b7aea9a1ab1fce129c3fed68977a9060200160405180910390a26108f7565b600682015460405133917fc65a4e529c0450a515882508bea7ee3485fbfdf8436e0bd13dc38dfbc859b1cb916108ee91878252602082015260400190565b60405180910390a25b50506106b06001600055565b61090b611698565b336000908152600760205260409020600481015460ff166109635760405162461bcd60e51b81526020600482015260126024820152714e6f20616374697665207363686564756c6560701b6044820152606401610729565b600401805460ff191690556109786001600055565b565b6001600160a01b0381166000908152600760205260408120600481015482919060ff166109ad5750600093849350915050565b80600201544210156109c55750600093849350915050565b54600194909350915050565b60006109dc81611556565b6106b061182c565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610a17611698565b610a1f6116c2565b610a2a6000336109e4565b610a625760405162461bcd60e51b81526020600482015260096024820152682737ba1030b236b4b760b91b6044820152606401610729565b60016001600160a01b0383166000908152600460208190526040909120015460ff166006811115610a9557610a95611f91565b14610ad05760405162461bcd60e51b815260206004820152600b60248201526a4e6f742070656e64696e6760a81b6044820152606401610729565b6001600160a01b03821660009081526004602052604081209082610af6576101f4610af8565b825b90506000610b0f8360000154838560010154611869565b9050600062278d008460010154610b2691906121d0565b610b3090836121d0565b905060405180610140016040528085600001548152602001838152602001828152602001428152602001856001015442610b6a91906121a6565b815242602082015260408101849052606081018590526080016003815260200185600201604051610b9b919061223f565b604051809103902081525060036000886001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff02191690836006811115610c4657610c46611f91565b021790555061012091909101516009909101558354610c7c9073426e7d03f9803dd11cb8616c65b99a3c0afea6de9088906118b2565b83546001600160a01b03871660009081526005602052604081208054909190610ca69084906121a6565b90915550506001600160a01b03861660009081526004602052604081208181556001810182905590610cdb6002830182611ea2565b5060006003820155600401805460ff19169055835460018501546001600160a01b038816917f3a2fb17990ba9fc92930b56cf93fe97981f8dfdf0f3ff6c90652866495a3b45c91610d2c90426121a6565b604080519283526020830191909152810186905260600160405180910390a250505050610d596001600055565b5050565b6000610d67611698565b610d6f6116c2565b6001600160a01b0382166000908152600760205260409020600481015460ff16610dd05760405162461bcd60e51b81526020600482015260126024820152714e6f20616374697665207363686564756c6560701b6044820152606401610729565b8060020154421015610e165760405162461bcd60e51b815260206004820152600f60248201526e5061796d656e74206e6f742064756560881b6044820152606401610729565b6001600160a01b038316600090815260036020819052604090912090600882015460ff166006811115610e4b57610e4b611f91565b14610e8a5760405162461bcd60e51b815260206004820152600f60248201526e4c6f616e206e6f742061637469766560881b6044820152606401610729565b6000610e9a8584600001546118e3565b90508015610f43578260010154836002016000828254610eba91906121a6565b9091555050600383018054906000610ed1836122de565b91905055508160060154600003610eef5760048301805460ff191690555b8254600683015460408051928352602083019190915242908201526001600160a01b038616907fc8e1a896eb0dca654576ee6ad666cbbb98d986bd52de045b045017a4d77a59639060600160405180910390a25b92505050610f516001600055565b919050565b60046020526000908152604090208054600182015460028301805492939192610f7e90612205565b80601f0160208091040260200160405190810160405280929190818152602001828054610faa90612205565b8015610ff75780601f10610fcc57610100808354040283529160200191610ff7565b820191906000526020600020905b815481529060010190602001808311610fda57829003601f168201915b50505050600383015460049093015491929160ff16905085565b611019611698565b6001600160a01b038116600090815260036020819052604090912090600882015460ff16600681111561104e5761104e611f91565b1461108d5760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030b1ba34bb32903637b0b760891b6044820152606401610729565b6203f48081600401546110a091906121a6565b4211156111095760088101805460ff191660051790556110c182600061174d565b816001600160a01b03167f0be253503c49f8fb02046da3ef57bc2f5f881eb14ba5c2c26b54bf2fb4e7db07826006015460405161110091815260200190565b60405180910390a25b506106b06001600055565b61111c611698565b6111246116c2565b33600090815260036020819052604090912090600882015460ff16600681111561115057611150611f91565b1461118e5760405162461bcd60e51b815260206004820152600e60248201526d27379030b1ba34bb32903637b0b760911b6044820152606401610729565b620151808310156111d75760405162461bcd60e51b8152602060048201526013602482015272119c995c5d595b98de481d1bdbc81cda1bdc9d606a1b6044820152606401610729565b42821161121b5760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964207374617274206461746560701b6044820152606401610729565b6000611234826006015483600701548460040154611b0b565b90506040518060a0016040528082815260200185815260200184815260200182846006015461126391906121d0565b81526001602091820181905233600081815260078452604090819020855181559385015192840192909255908301516002830155606083015160038301556080909201516004909101805460ff191691151591909117905560068301547f5ec36003c8c684eea9bc687c1ed0e127051b919dd8216cc20503468ba6368d9690839087906112f19083906121d0565b6040805193845260208401929092529082015260600160405180910390a25050610d596001600055565b611323611698565b61132b6116c2565b61133433611b82565b600084116113755760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610729565b6301e133808311156113bd5760405162461bcd60e51b81526020600482015260116024820152704475726174696f6e20746f6f206c6f6e6760781b6044820152606401610729565b806113fd5760405162461bcd60e51b815260206004820152601060248201526f141d5c9c1bdcd9481c995c5d5a5c995960821b6044820152606401610729565b3360009081526003602052604081206008015460ff16600681111561142457611424611f91565b146114665760405162461bcd60e51b8152602060048201526012602482015271416374697665206c6f616e2065786973747360701b6044820152606401610729565b336001600160a01b03167f2bdc8f5f9cb762a233a74819626fc55c0b067184bf5078a5a08d2b392f94f01585858585426040516114a79594939291906122f5565b60405180910390a261065f6001600055565b600082815260016020819052604090912001546114d581611556565b61065f83836115d9565b600080600080600080600060036000896001600160a01b03166001600160a01b0316815260200190815260200160002090508060000154816001015482600201548360060154846005015462278d0061153891906121a6565b60089590950154939c929b50909950975091955060ff169350915050565b6106b08133611cdc565b600061156c83836109e4565b6115d15760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a4506001610633565b506000610633565b60006115e583836109e4565b156115d15760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610633565b61164e611d15565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6002600054036116bb57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60025460ff16156109785760405163d93c066560e01b815260040160405180910390fd5b6040516001600160a01b03848116602483015283811660448301526064820183905261065f9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611d38565b6001600160a01b03821660009081526006602052604090205481156117a6576103b6811061177d576103e8611788565b6117888160326121a6565b6001600160a01b0384166000908152600660205260409020556117da565b606481116117b55760006117c0565b6117c06064826121f2565b6001600160a01b0384166000908152600660205260409020555b6001600160a01b0383166000818152600660209081526040918290205491519182527f79c012a0cfae660e09134956bc432c8497ec80e86a3a108d130e8b3fca52b3ad910160405180910390a2505050565b6118346116c2565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861167b3390565b60008061187c6127106301e133806121b9565b8361188786886121b9565b61189191906121b9565b61189b91906121d0565b90506118a781866121a6565b9150505b9392505050565b6040516001600160a01b0383811660248301526044820183905261069891859182169063a9059cbb9060640161171b565b6001600160a01b0382166000908152600360208190526040822090600882015460ff16600681111561191757611917611f91565b146119565760405162461bcd60e51b815260206004820152600f60248201526e4c6f616e206e6f742061637469766560881b6044820152606401610729565b600083116119975760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610729565b6040516323b872dd60e01b81526001600160a01b03851660048201523060248201526044810184905273426e7d03f9803dd11cb8616c65b99a3c0afea6de906323b872dd906064016020604051808303816000875af1925050508015611a1a575060408051601f3d908101601f19168201909252611a179181019061233c565b60015b611a28576000915050610633565b5082816006015411611a3b576000611a4b565b828160060154611a4b91906121f2565b60068201819055600003611ab05760088101805460ff1916600417905560018101546040519081526001600160a01b038516907fd7806bc9facb41d6b807f6861bcab0ca3309b7aea9a1ab1fce129c3fed68977a9060200160405180910390a2611b01565b836001600160a01b03167fc65a4e529c0450a515882508bea7ee3485fbfdf8436e0bd13dc38dfbc859b1cb848360060154604051611af8929190918252602082015260400190565b60405180910390a25b6001915050610633565b600080611b1842846121f2565b90506000611b2962278d00836121d0565b905080600003611b3d5785925050506118ab565b6000611b4c612710600c6121b9565b611b5687896121b9565b611b6091906121d0565b905080611b6d83896121d0565b611b7791906121a6565b979650505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eafb79e26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c06919061235e565b604051632474521560e21b8152600481018290526001600160a01b0384811660248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906391d1485490604401602060405180830381865afa158015611c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9c919061233c565b610d595760405162461bcd60e51b81526020600482015260116024820152702737ba10309031b7b73a3934b13aba37b960791b6044820152606401610729565b611ce682826109e4565b610d595760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610729565b60025460ff1661097857604051638dfc202b60e01b815260040160405180910390fd5b6000611d4d6001600160a01b03841683611d9b565b90508051600014158015611d72575080806020019051810190611d70919061233c565b155b1561069857604051635274afe760e01b81526001600160a01b0384166004820152602401610729565b60606118ab8383600084600080856001600160a01b03168486604051611dc19190612377565b60006040518083038185875af1925050503d8060008114611dfe576040519150601f19603f3d011682016040523d82523d6000602084013e611e03565b606091505b5091509150611e13868383611e1d565b9695505050505050565b606082611e3257611e2d82611e79565b6118ab565b8151158015611e4957506001600160a01b0384163b155b15611e7257604051639996b31560e01b81526001600160a01b0385166004820152602401610729565b50806118ab565b805115611e895780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b508054611eae90612205565b6000825580601f10611ebe575050565b601f0160209004906000526020600020908101906106b091905b80821115611eec5760008155600101611ed8565b5090565b600060208284031215611f0257600080fd5b81356001600160e01b0319811681146118ab57600080fd5b600060208284031215611f2c57600080fd5b5035919050565b80356001600160a01b0381168114610f5157600080fd5b600060208284031215611f5c57600080fd5b6118ab82611f33565b60008060408385031215611f7857600080fd5b82359150611f8860208401611f33565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60078110611fc557634e487b7160e01b600052602160045260246000fd5b9052565b6000610140820190508b82528a60208301528960408301528860608301528760808301528660a08301528560c08301528460e083015261200d610100830185611fa7565b826101208301529b9a5050505050505050505050565b6000806040838503121561203657600080fd5b61203f83611f33565b946020939093013593505050565b60005b83811015612068578181015183820152602001612050565b50506000910152565b85815284602082015260a06040820152600084518060a084015261209c8160c085016020890161204d565b60608301859052601f01601f1916820160c0019050611e136080830184611fa7565b600080604083850312156120d157600080fd5b50508035926020909101359150565b600080600080606085870312156120f657600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561211c57600080fd5b818701915087601f83011261213057600080fd5b81358181111561213f57600080fd5b88602082850101111561215157600080fd5b95989497505060200194505050565b600060c082019050878252866020830152856040830152846060830152836080830152611b7760a0830184611fa7565b634e487b7160e01b600052601160045260246000fd5b8082018082111561063357610633612190565b808202811582820484141761063357610633612190565b6000826121ed57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561063357610633612190565b600181811c9082168061221957607f821691505b60208210810361223957634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061225b57607f831692505b6020808410820361227a57634e487b7160e01b86526022600452602486fd5b81801561228e57600181146122a3576122d0565b60ff19861689528415158502890196506122d0565b60008a81526020902060005b868110156122c85781548b8201529085019083016122af565b505084890196505b509498975050505050505050565b6000816122ed576122ed612190565b506000190190565b85815284602082015260806040820152826080820152828460a0830137600060a08483010152600060a0601f19601f86011683010190508260608301529695505050505050565b60006020828403121561234e57600080fd5b815180151581146118ab57600080fd5b60006020828403121561237057600080fd5b5051919050565b6000825161238981846020870161204d565b919091019291505056fea2646970667358221220bccac376f830663329e3dab09062621dd5c34fbfc2bc396c2b2c5d36256e57d564736f6c63430008140033",
  "devdoc": {
    "custom:security-contact": "security@paythena.com",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "approveLoan(address,uint256)": {
        "params": {
          "borrower": "Address of the borrower",
          "customInterestRate": "Optional custom interest rate"
        }
      },
      "checkLoanDefault(address)": {
        "params": {
          "borrower": "Address of the borrower"
        }
      },
      "checkRepaymentNeeded(address)": {
        "params": {
          "borrower": "Address of the borrower"
        }
      },
      "constructor": {
        "params": {
          "_core": "Address of PaythenaCore contract"
        }
      },
      "getLoanDetails(address)": {
        "params": {
          "borrower": "Address of the borrower"
        }
      },
      "getRepaymentSchedule(address)": {
        "params": {
          "borrower": "Address of the borrower"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "makePayment(uint256)": {
        "params": {
          "amount": "Payment amount"
        }
      },
      "pause()": {
        "details": "Only callable by admin"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "processAutomatedRepayment(address)": {
        "params": {
          "borrower": "Address of the borrower"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "requestLoan(uint256,uint256,string)": {
        "params": {
          "amount": "Requested loan amount",
          "duration": "Loan duration in seconds",
          "purpose": "Purpose of the loan"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setupAutomatedRepayment(uint256,uint256)": {
        "params": {
          "frequency": "Repayment frequency in seconds",
          "startDate": "Start date for repayments"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Only callable by admin"
      }
    },
    "title": "PaythenaLoan",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveLoan(address,uint256)": {
        "notice": "Approve a loan application"
      },
      "cancelAutomatedRepayment()": {
        "notice": "Cancel automated repayment schedule"
      },
      "checkLoanDefault(address)": {
        "notice": "Check for and mark defaulted loans"
      },
      "checkRepaymentNeeded(address)": {
        "notice": "Check if repayment is needed"
      },
      "constructor": {
        "notice": "Contract constructor"
      },
      "getLoanDetails(address)": {
        "notice": "Get loan details"
      },
      "getRepaymentSchedule(address)": {
        "notice": "Get repayment schedule details"
      },
      "makePayment(uint256)": {
        "notice": "Make a loan payment"
      },
      "pause()": {
        "notice": "Emergency pause"
      },
      "processAutomatedRepayment(address)": {
        "notice": "Process automated repayment"
      },
      "requestLoan(uint256,uint256,string)": {
        "notice": "Request a loan"
      },
      "setupAutomatedRepayment(uint256,uint256)": {
        "notice": "Set up automated repayment schedule"
      },
      "unpause()": {
        "notice": "Emergency unpause"
      }
    },
    "notice": "Manages salary-backed loans for contributors",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1193,
        "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 26,
        "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 1074,
        "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3695,
        "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
        "label": "loans",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Loan)3670_storage)"
      },
      {
        "astId": 3700,
        "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
        "label": "loanApplications",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(LoanApplication)3682_storage)"
      },
      {
        "astId": 3704,
        "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
        "label": "totalLoansIssued",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3708,
        "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
        "label": "creditScore",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3772,
        "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
        "label": "repaymentSchedules",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(RepaymentSchedule)3767_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(LoanStatus)3690": {
        "encoding": "inplace",
        "label": "enum PaythenaLoan.LoanStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Loan)3670_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PaythenaLoan.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)3670_storage"
      },
      "t_mapping(t_address,t_struct(LoanApplication)3682_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PaythenaLoan.LoanApplication)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanApplication)3682_storage"
      },
      "t_mapping(t_address,t_struct(RepaymentSchedule)3767_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PaythenaLoan.RepaymentSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(RepaymentSchedule)3767_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Loan)3670_storage": {
        "encoding": "inplace",
        "label": "struct PaythenaLoan.Loan",
        "members": [
          {
            "astId": 3650,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3652,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "totalDue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3654,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "monthlyPayment",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3656,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "startDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3658,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "dueDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3660,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "lastPaymentDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3662,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "remainingAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3664,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "interestRate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3667,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "status",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(LoanStatus)3690"
          },
          {
            "astId": 3669,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "purposeHash",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(LoanApplication)3682_storage": {
        "encoding": "inplace",
        "label": "struct PaythenaLoan.LoanApplication",
        "members": [
          {
            "astId": 3672,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "requestedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3674,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "duration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3676,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "purpose",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3678,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3681,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(LoanStatus)3690"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RepaymentSchedule)3767_storage": {
        "encoding": "inplace",
        "label": "struct PaythenaLoan.RepaymentSchedule",
        "members": [
          {
            "astId": 3758,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3760,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "frequency",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3762,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "nextPaymentDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3764,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "remainingPayments",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3766,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/PaythenaLoan.sol:PaythenaLoan",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}